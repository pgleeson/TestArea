<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Importing existing NEURON/GENESIS models into neuroConstruct</title>
  </header>
  <body>


<p>Outlined here is the process for taking an existing cell model in NEURON and reimplementing it in neuroConstruct (a very similar process is used for importing GENESIS models).
At the moment it can be a complicated process but the advantages of doing it are:</p>
<ul>
<li>It is easier to incorporate single cell models into networks of arbitrary size and complexity once they are in neuroConstruct</li>
<li>It simplifies making the model available for multiple simulators (e.g. <a href="Glossary_gen.html#GENESIS">GENESIS</a> too). Once in neuroConstruct/NeuroML format,
the cell model will be available for any other simulator supported by these in the future (e.g. GENESIS 3), provided the cell mechanisms can be implemented in that simulator.</li>
<li>All of the inbuilt functionality for storing, browsing and analysing simulations neuroConstruct is available</li>
<li>A neuroConstruct <a href="Glossary_gen.html#Project">project</a> including the model description, results of the simulation, plots of the figures in
published papers, etc. can be distributed in a single zipped file</li>
<li>The model can be easily rerun and model parameters changed by those without knowledge of the native scripting environment</li>
</ul>
<p>Note that the importation process will become a lot less complicated in future when cell morphologies and channel mechanisms can be exported in XML format
from the simulators themselves. (Note: the alpha version of NEURON 6.0 contains an almost complete export of cell morphologies in NeuroML format from ModelView)</p>


<ol>
<li>With a fully tested NEURON model, ensure the hoc code is split between separate files containing a) the
morphologies of the cells, b) the mod files containing the cell mechanisms (including default values for all parameters,
e.g. max conductance densities) c) the main hoc file which creates the cells, places the channels on the cells, adds the
stimulations, etc. and runs the main simulation and d) a file which creates any GUI elements for plotting data,
(re)running the simulation and changing parameters. This is the standard way to split functionality between files, and if
a model is published with everything in a single large file, there is little chance of reusing much in neuroConstruct.</li>

<li>In general neuroConstruct should be able to import files a) above and include b) as the NEURON implementation of <a href="Glossary_gen.html#Cell Mechanism">Cell Mechanisms</a>.
The simulation parameters in c) will be set through the neuroConstruct GUI by hand, and any plots of data can also be specified
through the interface.</li>

<li>Select <strong>File->New Project</strong>, and enter the name and location of your new project. To import the morphology
file Go to <strong>Cell Types -> Add New Cell Type</strong> and select <strong>NeuronMorphReader</strong> in the first drop down box.
Select the morphology file by entering the path into the text field or pressing the <strong>...</strong> button and
selecting the file manually. Note that the biggest problem in importing files is that there is no prescribed way to write
NEURON morphology files, unlike the *.p (readcell) file format in GENESIS. For the importation process, it assumes the
form of a file similar to that generated by NTS cable (usually a *.nrn file). This will normally contain only <strong>create</strong> statements,
<strong>pt3dadd</strong> commands, <strong>connect</strong> commands and the <strong>fscan</strong> function. Other commands
e.g. <strong>insert</strong> are ignored in this version. More details <a href="import.html#NEURON">here</a>. It wasn't
an easy matter creating an importer for general NEURON morphology files, so not every *.hoc/*.nrn file will work first time. If you
have specific problems, <a href="../contact/index.html">send me</a> the morphology file and I'll try to adjust the
importer to deal with it, or I can suggest ways to rewrite the file in a simpler format. Alternatively for cells with
a small number of sections (&lt;10), you can add a Simple Cell (via tab <strong>Cell Types -> Add New Cell to Project</strong>),
rename it, press <strong>View this cell in 3D</strong>, click on a section, press <strong>Edit...</strong> and add/delete
sections as appropriate, building your morphology as you go. </li>



<li>To include a new <a href="Glossary_gen.html#Channel Mechanism">Channel Mechanism</a> (e.g. a voltage dependent ion channel) or
a <a href="Glossary_gen.html#Synaptic Mechanism">Synaptic Mechanism</a> go to tab <strong>Cell Mechanisms</strong>,
select <strong>Create File Based Mechanism</strong>. Enter the name of the Cell Mechanism. If the mod file is a density mechanism,
choose "Channel Mechanism". If it represents the end point of a synaptic connection, choose "Synaptic Mechanism". Select the
*.mod file which implements the Channel Mechanism/Synapse when prompted. Existing Channel Mechanisms implemented in NMODL
can be reused with a few small changes. In the line specifying the the name of the mechanism in the original
NMODL file, replace the name string with %Name%, so for example in Exp3Syn.mod the line<br/>

&nbsp;&nbsp;POINT_PROCESS Exp3Syn<br/>

becomes<br/>

&nbsp;&nbsp;POINT_PROCESS %Name%<br/>

and in a channel mechanism NaFast.mod<br/>

&nbsp;&nbsp;SUFFIX NaFast<br/>

becomes<br/>

&nbsp;&nbsp;SUFFIX %Name%<br/>

In general any value between %'s will be replaced with another value by neuroConstruct. Another change which should
be made in your NMODL files is to replace the value of the max conductance density with %Max Conductance Density% in
channel mechanisms and the max conductance with %Max Conductance% in synapses. Note: the variable name <strong>gmax</strong> should be used for
the max conduction density in channels and max conductance in synapses, so that neuroConstruct will know the public variable
name so it can access it from the hoc. To get a better idea of what's going on,
open (via <strong>Edit selected Cell Mechanism</strong>) any of the File Based Cell Mechanisms included in examples/Ex8-DentateGyrus,
paying attention to the NEURON template code. More information is available <a  href="cellmechanism.html">here</a></li>

<li>To put the channel mechanisms on to the cell you have imported, go to <strong>Visualisation</strong>, select the cell
name in the drop down box and press <strong>View</strong>. Select <strong>Groups</strong> in the bottom right drop down box.
There are some basic groups defined, but to add others, click <strong>Edit Groups</strong>. In this way
<a href="Glossary_gen.html#Section Group">Section Groups</a> (corresponding to SectionLists as used in NEURON)
which will have similar biophysical properties can be defined. Now select <strong>Cell density mechanisms</strong> in the drop down box,
and click <strong>Edit Density Mechanisms</strong>. You can now place the Channel Mechanisms on the groups you have created.
If it's a single compartment cell, just use the group all.</li>

<li>Finally create a new <a href="Glossary_gen.html#Region">Region</a>, create a new <a href="Glossary_gen.html#Cell Group">Cell Group</a>
(the default values will create a single randomly placed cell) and press <strong>Generate</strong>. You can also add an
electrophysiological input (e.g. an IClamp) and a graph of the cell voltage via the tab <strong>Export Network -> Input and Output</strong>.
Again the default values should be a good starting point.</li>

<li>Hopefully all of this will be successful and you can go to tab <strong>Export</strong> and generate the NEURON code. </li>

<li>This description only concerns placing one cell in 3D. Once each cell works as expected, networks can be built. See the
description of <a href="netconns.html">Network Connections</a> for more information.</li>
</ol>


Process for converting mod/GENESIS script channels into ChannelML

<ol>
<li>Single compartment, e.g. soma</li>
Get passive props working properly
convert simple channel, e.g. non ca dependent K chanel
not jus voltage, also internal variable, mhn
don't worry if not init properly
Comparison depends on k value in akd, accurate 1/k
For complete accuracy, use table impl prefs

Careful to use temp & ek, ena of prev models!!


<p>&nbsp;</p>
<p>&nbsp;</p>

  </body>
</document>
