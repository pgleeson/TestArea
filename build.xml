<!--
     This is the neuroConstruct build file for use with Ant (http://ant.apache.org/)

     Type ant -p to view all possible build targets
-->

<project default="makejar" basedir=".">

    <!-- FORREST_HOME must be set as an environment variable -->
    <property environment="env"/>
    <property name="forrest.home" value="${env.FORREST_HOME}"/>
    <property name="forrest.antfile" value="${env.FORREST_HOME}/main/forrest.build.xml"/>


  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

  <target name="init">
    <tstamp/>
    <property name="name" value="neuroConstruct"/>
    <property name="version" value="1.1.1"/>
    <property name="version.impl" value="${version}"/>
    <property name="year" value="2008"/>

    <echo message="----------- ${name} v${version} ------------"/>

    <property name="build.compiler" value="classic"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>
    <property name="src.dir" value="./src"/>
    <property name="examples.dir" value="./examples"/>
    <property name="models.dir" value="./models"/>
    <property name="projects.dir" value="./projects"/>
    <property name="templates.dir" value="./templates"/>


    <property name="dist.dir" value="./dist"/>

    <property name="packages" value="ucl.physiol.neuroconstruct.*"/>


    <property name="hdf5.libs" value="lib/hdf5"/>
    <property name="jython.libs" value="lib/jython"/>


    <property name="build.dir" value="./"/>
    <property name="build.dest" value="./classes"/>

    <property name="docs.dir" value="./docs"/>
    <property name="apidocs.dir" value="${docs.dir}/api"/>
    <property name="helpdocs.dir" value="${docs.dir}/helpdocs"/>

    <property name="website.dir" value="${docs.dir}/website"/>
    <property name="xmldocs.dir" value="${docs.dir}/XML"/>

    <property name="orig.helpdocs.dir" value="${xmldocs.dir}/xmlForHtml/docs"/>
    <property name="helpdocs.xsl.file" value="${xmldocs.dir}/helpViewer/helpdocs.xsl"/>

    <property name="orig.glossary.file" value="${xmldocs.dir}/glossary/Glossary.xml"/>
    <property name="glossary.xsl.file" value="${xmldocs.dir}/glossary/Glossary.xsl"/>
    <property name="forrest.glossary.dir" value="${xmldocs.dir}/xmlForHtml/docs"/>


    <property name="forrest.settings.dir" value="${xmldocs.dir}/Forrest"/>


    <property name="main.app.class" value="ucl.physiol.neuroconstruct.gui.MainApplication"/>
    <property name="general.properties.class" value="ucl.physiol.neuroconstruct.project.GeneralProperties"/>
    <property name="xml.transform.class" value="ucl.physiol.neuroconstruct.utils.XMLUtils"/>

    <property name="main.gui.dir" value="ucl/physiol/neuroconstruct/gui"/>
    <property name="nmodl.gui.dir" value="ucl/physiol/neuroconstruct/nmodleditor/gui"/>
    
    <property name="jar.file" value="${build.dir}/${name}_${version}.jar"/>

    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>

    <property name="neuroconstruct-core"       value="${build.dest}"/>


    <!-- Compilation class path -->
    <path id="compile.class.path">
        <fileset dir="${hdf5.libs}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${jython.libs}">
          <include name="*.jar"/>
        </fileset>

    </path>

    <path id="run.class.path">
      <path refid="compile.class.path"/>
      <pathelement location="${neuroconstruct-core}"/>

    </path>

  </target>



  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <target name="prepare" depends="init">
    <mkdir dir="${build.dest}"/>
  </target>



  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->

  <target name="compile" depends="prepare" description="Compiles the source code">

    <javac srcdir="${src.dir}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           compiler="modern">
      <classpath refid="compile.class.path"/>
      <compilerarg value="-Xlint:serial"/> <!-- As cells can be stored as Java serialised objs, essential to have this check-->
    </javac>

    <copy todir="${build.dest}/${main.gui.dir}">
        <fileset dir="${src.dir}/${main.gui.dir}">
            <include name="*.png"/>
            <include name="*.PNG"/>
            <include name="*.gif"/>
            <include name="*.GIF"/>
        </fileset>
    </copy>

  </target>



  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->

  <target name="makejar" depends="compile" description="Creates the jar file">

    <jar jarfile="${jar.file}" basedir="${build.dest}">
        <manifest>
            <attribute name="Main-Class" value="${main.app.class}"/>
        </manifest>
    </jar>
  </target>



  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->

  <target name="javadoc" depends="init"
          description="Creates the API documentation with links to JDK 1.4 classes">
    <mkdir dir="${apidocs.dir}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${apidocs.dir}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${name} API"
             doctitle="${name}"
             private = "false">

        <classpath refid="run.class.path"/>
        <tag name="todo" scope="all" description="To do:" />

        <link href="http://java.sun.com/j2se/1.4/docs/api"/>
        <link href="http://java.sun.com/products/java-media/3D/forDevelopers/J3D_1_2_API/j3dapi"/>

    </javadoc>
  </target>




  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init"
          description="Removes built files">
    <delete file="${jar.file}"/>
    <delete dir="${build.dest}"/>
    <mkdir dir="${build.dest}"/>
    <delete dir="${apidocs.dir}"/>
    <mkdir dir="${apidocs.dir}"/>
    <delete dir="${helpdocs.dir}"/>
    <mkdir dir="${helpdocs.dir}"/>
    <delete dir="${website.dir}"/>
    <mkdir dir="${website.dir}"/>
    <delete dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>



  <!-- =================================================================== -->
  <!-- Run main application                                                -->
  <!-- =================================================================== -->

  <target name="run" depends="makejar"
          description="Runs the main application. Use an altered value with -Xmx in the line below to run the application with extra memory. Choosing a max java heap size of about half your total physical memory is best, errors have been thrown (when 3D view is shown) when the application is run with more than this. Note: the -Dsun.java2d.noddraw=true has been added to solve problems with excessive flickering of the Swing components when showing 3D on some Windows systems">
    <java classname="${main.app.class}" fork="true">
        <jvmarg value="-Xmx700M" />
        <jvmarg value="-Xms600M" />
        <jvmarg value="-Djava.library.path=./lib/hdf5/linux;./lib/hdf5/win"/>
        <jvmarg value="-Dsun.java2d.noddraw=true" />
        <classpath refid="run.class.path"/>
    </java>
  </target>



  <!-- =================================================================== -->
  <!-- Run main application, opening last project                          -->
  <!-- =================================================================== -->

  <target name="runlast" depends="makejar"
          description="Runs the main application, opening last project">
    <java classname="${main.app.class}" fork="true">
        <jvmarg value="-Xmx700M" />
        <jvmarg value="-Xms600M" />
        <jvmarg value="-Djava.library.path=./lib/hdf5/linux;./lib/hdf5/win"/>
        <jvmarg value="-Dsun.java2d.noddraw=true" />
        <arg value="-lastproj"/>
        <classpath refid="run.class.path"/>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Run main application with lots of memory, opening last project      -->
  <!-- =================================================================== -->

  <target name="runbiglast" depends="makejar"
          description="Runs the main application with lots of memory, opening last project">
    <java classname="${main.app.class}" fork="true">
        <jvmarg value="-Xmx4000M" />
        <jvmarg value="-Xms2000M" />
        <jvmarg value="-Djava.library.path=./lib/hdf5/linux;./lib/hdf5/win"/>
        <jvmarg value="-Dsun.java2d.noddraw=true" />
        <arg value="-lastproj"/>
        <classpath refid="run.class.path"/>
    </java>
  </target>



  <!-- =================================================================== -->
  <!-- Generates the xml file for Forrest from Glossary.xml                -->
  <!-- =================================================================== -->

  <target name="glossary" depends="makejar"
          description="Generates the xml file for Forrest from Glossary.xml">
    <java classname="${xml.transform.class}"
          fork="true">
        <jvmarg value="-Xmx700M" />
        <jvmarg value="-Xms600M" />
        <arg value="${orig.glossary.file}"/>
        <arg value="${glossary.xsl.file}"/>
        <arg value="${forrest.glossary.dir}"/>
        <arg value="_gen.xml"/>
        <classpath refid="run.class.path"/>
    </java>
  </target>



  <!-- ====================================================================== -->
  <!-- Generates the main website using Forrest (http://forrest.apache.org)   -->
  <!-- ====================================================================== -->

  <target name="website" depends="glossary"
          description="Generates the main website using Forrest (http://forrest.apache.org)">

    <copy file="./README" todir="${website.dir}/docs" />
    <copy file="./RELEASE_NOTES" todir="${website.dir}/docs" />

    <ant antfile="${forrest.antfile}" dir="${forrest.settings.dir}" target="site"/>

    <echo>Generated the website...</echo>


  </target>



  <!-- ====================================================================== -->
  <!-- Generates the documentation for the help viewer inside neuroConstruct  -->
  <!-- ====================================================================== -->

  <target name="helpdocs" depends="glossary"
          description="Generates the documentation for the help viewer inside neuroConstruct. Makes a simpler version of the docs on the website, using the same base XML">

    <java classname="${xml.transform.class}"
          fork="true">
        <jvmarg value="-Xmx700M" />
        <jvmarg value="-Xms600M" />
        <arg value="${orig.helpdocs.dir}"/>
        <arg value="${helpdocs.xsl.file}"/>
        <arg value="${helpdocs.dir}"/>
        <arg value=".html"/>
        <classpath refid="run.class.path"/>
    </java>


     <echo>Generated the helpdocs...</echo>


    <copy file="./README" todir="${helpdocs.dir}" />
    <copy file="./RELEASE_NOTES" todir="${helpdocs.dir}" />

  </target>



  <!-- =================================================================== -->
  <!-- Toggles output to screen                                            -->
  <!-- =================================================================== -->

  <target name="logtog" depends="makejar"
          description="Toggles output to screen and saves the GeneralProperties setting">
    <java classname="${general.properties.class}"
          fork="true">
        <jvmarg value="-Xmx700M" />
        <jvmarg value="-Xms600M" />
        <classpath refid="run.class.path"/>
    </java>
  </target>




  <!-- =================================================================== -->
  <!-- Creates a dist dir and a zip file with directory structure,         -->
  <!--  jar but no source                                                  -->
  <!-- =================================================================== -->

  <target name="dist" depends="clean,website,helpdocs" description="Creates a zip file with directory structure, jar but no source">

      <property name="temp_ver.dir" value="${dist.dir}/${name}_${version}"/>

      <delete dir="${temp_ver.dir}"/>
      <mkdir dir="${temp_ver.dir}"/>


      <mkdir dir="${temp_ver.dir}/logs"/>
      <copy file="./logs/README" todir="${temp_ver.dir}/logs" />

      <mkdir dir="${temp_ver.dir}/examples"/>
      <copy todir="${temp_ver.dir}/examples">
          <fileset dir="${examples.dir}">
              <include name="*/*.*"/>
              <include name="*/cellMechanisms/**/*"/>
              <include name="*/morphologies/*"/>
              <include name="*/importedMorphologies/*"/>
          </fileset>
      </copy>

      <mkdir dir="${temp_ver.dir}/docs"/>
      <copy todir="${temp_ver.dir}/docs">
          <fileset dir="${docs.dir}" >
              <include name="glossary/**/*.*"/>
              <include name="website/**/*.*"/>
              <include name="helpdocs/**/*.*"/>
              <include name="XML/glossary/**/*.*"/>
          </fileset>
      </copy>


      <mkdir dir="${temp_ver.dir}/lib"/>
      <copy todir="${temp_ver.dir}/lib">
        <fileset dir="lib">
              <include name="**/*"/>
        </fileset>
      </copy>

      <mkdir dir="${temp_ver.dir}/pythonNeuroML"/>
      <copy todir="${temp_ver.dir}/pythonNeuroML">
        <fileset dir="pythonNeuroML">
              <include name="**/*"/>
        </fileset>
      </copy>

      <mkdir dir="${temp_ver.dir}/igorNeuroMatic"/>
      <copy todir="${temp_ver.dir}/igorNeuroMatic">
        <fileset dir="igorNeuroMatic">
              <include name="*.*"/>
              <include name="README"/>
        </fileset>
      </copy>

      <mkdir dir="${temp_ver.dir}/matlabOctave"/>
      <copy todir="${temp_ver.dir}/matlabOctave">
        <fileset dir="matlabOctave">
              <include name="*.*"/>
              <include name="README"/>
        </fileset>
      </copy>



      <mkdir dir="${temp_ver.dir}/templates"/>
      <copy todir="${temp_ver.dir}/templates">
        <fileset dir="${templates.dir}">
          <include name="xmlTemplates/**/*"/>
          <include name="genesisUtils/**/*"/>
          <include name="neuronUtils/**/*"/>
          <include name="modFileTemplates/**/*"/>
          <include name="README"/>
        </fileset>
      </copy>

      <copy file="build.xml" todir="${temp_ver.dir}"/>
      <copy file="run.bat" todir="${temp_ver.dir}"/>
      <copy file="run.sh" todir="${temp_ver.dir}"/>
      <copy file="README" todir="${temp_ver.dir}"/>
      <copy file="RELEASE_NOTES" todir="${temp_ver.dir}"/>
      <copy file="RELEASE_NOTES" todir="${temp_ver.dir}/docs/helpdocs"/>
      <copy file="licence.txt" todir="${temp_ver.dir}"/>


     <copy file="${name}_${version}.jar" todir="${temp_ver.dir}"/>

      <zip destfile="./${name}_${version}.zip"
            basedir="${dist.dir}/"
            whenempty="create"/>

      <copy todir="${dist.dir}">
          <fileset dir="${temp_ver.dir}"/>
      </copy>


      <delete dir="${temp_ver.dir}"/>

  </target>



  <!-- =================================================================== -->
  <!-- Creates a zip file with everything in home directory                -->
  <!-- =================================================================== -->

  <target name="zipfull" depends="clean,website,helpdocs"
          description="Creates a (big) zip file with everything in base directory ">
      <zip destfile="./${name}_full_${version}.zip"
             basedir="." excludes="*.zip"/>
  </target>



  <!-- =================================================================== -->
  <!-- Replaces the copyright line in the source files, with the one here  -->
  <!-- =================================================================== -->

    <target name="replacecopyright" depends="init" description="Replaces copyright line in *.java">
      <replaceregexp
          match="2007 Padraig Gleeson"
          replace="2008 Padraig Gleeson"
          byline="true">
          <fileset dir="${src.dir}">
              <filename name="**/*.java"/>
          </fileset>
      </replaceregexp>
    </target>

</project>

<!-- End of file -->
