begintemplate Test
public f, init
objref this

strdef name

proc init() {

print "Initialising ", $1

sprint(name, "TestObj_%d", $1)

}

func f() {local x, i, id
    print "Function f() called in ", name
    
      strdef host
   system("hostname", host)
   print "On host: ", host
	id = hoc_ac_
	x = $1*$1
	for i=1,1000000 hoc_cross_x_ = i
	printf("%s: id=%d %s: %g = f(%g, \"%s\", %s)\n", name, id, this, x, $1, $s2, $o3)
	$o3.printf
    
    print "\n"
	return x
}


endtemplate Test

objref test[3]

for i=0,2 {

test[i] = new Test(i) // better be exactly the same on all machines
}

objref pc
pc = new ParallelContext()

print "Created ParallelContext"

pc.runworker()

objref vec
strdef s
vec = new Vector(4)

for i=1,10 {
	pc.submit(test[i%3], "f", i, "hello", vec.fill(10*i))
    print "Submitted to ", i
    print "\n"
}

x = 0

while ((id = pc.working()) != 0) {
	x += pc.retval
	printf("Master: id=%d i=%d retval=%g  x=%g\n\n", id, pc.upkscalar, pc.retval, x)
	if (i < 20) {
		pc.submit(test[i%3], "f", i, "goodbye", vec.fill(10*i))
		i += 1
	}
}

pc.done()
