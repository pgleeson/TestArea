


strdef oneHost
oneHost = "avicenna"

objref strobj
strobj = new StringFunctions()

func f() {              // a function with no context that *CHANGES*
            //except its argument
        
   strdef host
   system("hostname", host)    
            
   print "------------------------------------>>>>    Task running on host: ", host
   
   print "In the func f, argument: ", $1   
   
	for i=1,1000000 hoc_cross_x_ = i
   
   
   print "------------------------------------>>>>    Finished task"
    
   if (strobj.substr(host, oneHost) == 0) {
   	//print "Running on ", oneHost
   	return 1
   }
   return 0         
   
}



startsw()


objref pc

print "Creating ParallelContext..."

   strdef master
   system("hostname", master)
   print "Master running on host: ", master
   
   
pc = new ParallelContext()
pc.runworker()          // master returns immediately, workers in
                        // infinite loop
                        

print "pc.runworker() called..."
                        
print "pc.nhost: ", pc.nhost                   
     

numToDo = 100
s = 0
if (pc.nhost == 0) {    // use the serial form
   for i=1, numToDo {
      s += f(i)
   }
}else{                  // use the bulletin board form
   for i=1, numToDo {        // scatter processes
   
   	print "Submitting job number: ", i
   
      pc.submit("f", i) // any context needed by f had better be
   }                    // the same on all hosts
   
   
   while (pc.working) { // gather results
      print "Master receiving completed task\n\n"
      s += pc.retval    // the return value for the executed function
   }
}
print "num on ", oneHost, " is: ", s
print "Num on other is: ", (numToDo - s)


print "All done here..."


print "\n\nAll ", numToDo,"tasks finished. Total time taken: ", stopsw(), "\n\n"

pc.done                 // wait for workers to finish pr
