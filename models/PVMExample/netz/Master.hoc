load_file("nrngui.hoc")


load_file("nCtools.hoc")


load_file("SampleCell.hoc")
load_file("OtherCell.hoc")

load_file("NetworkController.hoc")




objref strobj
strobj = new StringFunctions()

numToDo = 22

numSampCells = numToDo

numOthCells = numToDo

numDiffCells = numToDo


totalCells = numSampCells + numOthCells

allowOnMasterhost = 0

tstop = 0.5





objref pc

print "Creating ParallelContext..."
   
   
pc = new ParallelContext()


//////////////////////////////////////////////////
///////              Worker code
/////////////////////////////////////////////////

strdef myCellGroupName

objectvar sampCells[numSampCells]
objectvar othCells[numOthCells]
objectvar diffCells[numOthCells]


//objectvar proxySeg[numOthCells]




objectvar myCopyNetCont

proc createLocalCell() {


    myCellGroupName = $s1
    
    cellNum = $2
        
    strdef host
    system("hostname", host)
    
    strobj.left(host, strobj.len(host)-1)

    
    
        print "------------------------------------>>>>    Creating ",cellNum,"cells for ", myCellGroupName," on host: ", host, "."
           
    for i=0,cellNum-1 {
        strdef reference
        sprint(reference, "%s_%d", myCellGroupName, i)
        
        sampCells[i] = new SampleCell(reference, "SampleCell", "A SampleCell for testing purposes")
    }
    
    
	//pc.post("setup", globalNum, myCellGroupName, host)
           
}

proc createOtherCell() {


    myCellGroupName = $s1
    
    cellNum = $2
    //globalNum = $3
        
    strdef host
    system("hostname", host)
    strobj.left(host, strobj.len(host)-1)
    
    strdef masterhost
    masterhost = $s3
    
    //print "Masterhost: ", masterhost, ", my host: ",host," for this network"
    
    if ((allowOnMasterhost == 0) && (strcmp(masterhost, host) == 0)) {
       print ".........................................................                     Same host as master!!!"
    } else {
           print ".........................................................                     Different than master"
          
          
        //strdef reference
        //sprint(reference, "%s_%d", myCellGroupName, $2)
        
        //print "------------------------------------>>>>    Creating  cell: ", reference," globalid: ",globalNum, " on host: ", host

          
    }
        print "------------------------------------>>>>    Creating ",cellNum,"cells for ", myCellGroupName," on host: ", host, "."
               
        for i=0,cellNum-1 {
            strdef reference
            sprint(reference, "%s_%d", myCellGroupName, i)
            
            othCells[i] = new OtherCell(reference, "OtherCell", "An other cell for testing purposes")
        }
        
        objectvar syn_NetConn_SampleCellGroup_OtherCellGroup_DoubExpSyn_0_1
        access othCells[0].Soma
        
        //psection()
        
        
        //othCells[0].Soma 
        
        //syn_NetConn_SampleCellGroup_OtherCellGroup_DoubExpSyn_0_1 = new DoubExpSyn(0.35229468)
        
        //othCells[0].Soma syn_NetConn_SampleCellGroup_OtherCellGroup_DoubExpSyn_0_1 = new Exp2Syn()
        
        //create proxySeg 
        //proxySeg othCells[0].synlist.append(new NetCon(&v(0.7241608), syn_NetConn_SampleCellGroup_OtherCellGroup_DoubExpSyn_0_1, -20.0, 0.0, 0.17133021))


}



proc createSingleCell() {

    myCellGroupName = $s1
    
    cellNum = $2
    globalNum = $3
        
    strdef host
    system("hostname", host)
    strobj.left(host, strobj.len(host)-1)
    
    strdef masterhost
    masterhost = $s4
    

    strdef reference
    sprint(reference, "%s_%d", myCellGroupName, $2)
    
    print "------------------------------------>>>>    Creating  cell: ", reference," globalid: ",globalNum, " on host: ", host
    
    diffCells[$3] = new OtherCell(reference, "OtherCell", "An other cell for testing purposes")
       
    
}



proc advanceOneStep() {

    strdef host
    system("hostname", host)
    
    print "Advancing a single step for Cell Group ",myCellGroupName," on host: ", host, " at time: ", $1
    
    //fadvance()
    

    print "Done one step: ", host
    
    
	//pc.post("done", index)
}




proc getHost(){

    strdef host
    system("hostname", host)
    
    
    print "------------------------------------>>>>    getHost() called on Cell Group ",myCellGroupName, ", host: ", host
    //print "------------------------------------>>>>    id of host: ", pc.id()
 
}



//////////////////////////////////////////////////
///////              End of worker code
/////////////////////////////////////////////////



startsw()



   strdef masterhost
   system("hostname", masterhost)
   
    strobj.left(masterhost, strobj.len(masterhost)-1)
    
   print "Master running on host: ", masterhost
   
   
pc.runworker()          // master returns immediately, workers in
                        // infinite loop
                        
                        
                     
//system("sleep 3")

print "finished setting up..."   

print "pc.runworker() called..."
                        
print "pc.nhost: ", pc.nhost            


objref netCont

print "Creating NetworkController..."
   
   
netCont = new NetworkController()
     
proc createCellGroups() {

    s = 0
    if (pc.nhost == 0) {    // use the serial form
    
        print "Big error!!! No hosts!!"
    
    }else{                  
    
        strdef groupName 
        
       //for i=0, numToDo-1 {        // scatter processes
       
        groupName = "GroupLocal"
    
        //pc.submit("createLocalCell", groupName, i, i)
        
        createLocalCell(groupName, numSampCells)
        
        
        groupName = "DiffGroup"
        
        for i=0, numDiffCells-1 {
        
            pc.submit("createSingleCell", groupName, i, i, masterhost)
        
        }
        
        
        
        //groupName = "GroupUdder"
        
       // pc.submit("createOtherCell", groupName, numOthCells, masterhost)
        
        count = count +1
        
        
        //for i=0, numToDo-1 {
    
        
       // }
    
       
       while (pc.working) { // gather results
          print "gathering results..."
          ret =  pc.retval    // the return value for the executed function
          
          print "Returned value: ", ret
       }
       
       /*
       for i=0, 5 {      
       
       pc.submit("getHost", i)
       }
       
       
       while (pc.working) { // gather results
          print "Gathering results, again..."
          ret =  pc.retval    // the return value for the executed function
          
          print "Returned value: ", ret
       }  */
       
    }

}




createCellGroups()



////////////////////// adding a stim.... 


objref spikesource_SampleIClamp[6]

objref synapse_SampleIClamp[6]
objref connection_SampleIClamp[6]
thresh = -20
delay = 0
weight = 1

access sampCells[0].Soma 


spikesource_SampleIClamp[0] = new NetStim(0.5)
//   NOTE: This is a very rough way to get an average rate of randStim.rate!!!

spikesource_SampleIClamp[0].number = 2000.0
spikesource_SampleIClamp[0].interval = 20.0
spikesource_SampleIClamp[0].noise = 1.0 
spikesource_SampleIClamp[0].start = 0 
synapse_SampleIClamp[0] = new DoubExpSyn(0.5) 
//    Inserts synapse 0.5 of way down


connection_SampleIClamp[0] = new NetCon(spikesource_SampleIClamp[0], synapse_SampleIClamp[0], thresh, delay, weight)


objref SampleGraph
SampleGraph = new Graph(0)
SampleGraph.size(0,tstop,-90.0,50.0)
SampleGraph.view(0, -90.0, tstop, 140.0, 80, 330, 330, 250)
{
SampleGraph.addexpr("sampCells[0].Soma.v", "sampCells[0].Soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
graphList[0].append(SampleGraph)
}


{
SampleGraph.addexpr("othCells[0].Soma.v", "othCells[0].Soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
//graphList[0].append(SampleGraph)
}


///////////////////////////// done




print "All done here..."


print "\n\nEverything set up. Total time taken: ", stopsw(), "\n\n"





//////////////    Running...


stdinit()
realtime = 0
screen_update_invl = .05
rt = screen_update_invl
rtstart = startsw()
eventcount=0
eventslow=1
stoprun = 0
stoprun = 0

using_cvode_ = 0

if (using_cvode_) {
    print "using_cvode..."
    cvode.event(tstop)
    ts = tstop
    if (cvode.use_local_dt) {
        cvode.solve(ts)
        flushPlot()
        realtime = startsw() - rtstart
        //return
    }
}else{
    print "Running..."
    ts = tstop - dt/2
    while(t < ts && stoprun == 0) {
        print "Stepping at time ",t,"..."
        step()
        /*
        thresh = -20
        pc.submit("advanceOneStep", t)
        
       while (pc.working) { // gather results
          print "Checking all returned..."
          ret =  pc.retval    // the return value for the executed function
          
          //print "Returned value: ", ret
       }        
        */
        
        realtime = startsw() - rtstart
        if (realtime >= rt) {
            screen_update()
            //really compute for at least screen_update_invl
            realtime = startsw() - rtstart
            rt = realtime + screen_update_invl
        }
    }

    if (using_cvode_ && stoprun == 0) { // handle the tstop event
        print "Stopping..."
        step() // so all recordings take place at tstop
    }

    flushPlot()
    realtime = startsw() - rtstart
}











print "\n\nFinished run. Total time taken: ", realtime, "\n\n"







for i=0,numSampCells-1 {print "Cell at ", i, ": ", sampCells[i].toString() }


//for i=0,numOthCells-1 {print "Cell at ", i, ": ", othCells[i].toString() }












pc.done                 // wait for workers to finish pr
