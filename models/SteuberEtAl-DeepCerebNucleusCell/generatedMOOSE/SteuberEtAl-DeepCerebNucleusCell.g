//  ******************************************************
// 
//     File generated by: neuroConstruct v1.4.1
// 
//  ******************************************************

echo ""
echo "*****************************************************"
echo ""
echo "    neuroConstruct generated GENESIS simulation"
echo "    for project: /home/padraig/neuroConstruct/models/SteuberEtAl-DeepCerebNucleusCell/SteuberEtAl-DeepCerebNucleusCell.ncx"
echo ""
echo "    Description: Initial impl of Steuber, Schultheiss, Silver, De Schutter & Jaeger Deep Cerebellar Nucleus cell model in NeuroML based on original GENESIS scripts"

echo "    Simulation configuration: Default Simulation Configuration"
echo "    Simulation reference: Sim_31"
echo " "
echo  "*****************************************************"



//   Initializes random-number generator

randseed 847742628

//   This temperature is needed if any of the channels are temp dependent (Q10 dependence) 
//   

float celsius = 32.0

str units = "GENESIS SI Units"

str genesisCore = "MOOSE"


//   Including neuroConstruct utilities file

include nCtools 

//   Including external files

//   Creating element for channel prototypes

if (!{exists /library})
    create neutral /library
end


//   Including channel mechanisms 
//   

include pas
make_pas

include NaF
make_NaF

include NaF_GEN
make_NaF_GEN


//   Including synaptic mech 
//   



create neutral /cells

//////////////////////////////////////////////////////////////////////
//   Cell group 0: Soma_GEN has cells of type: DCN_soma_GEN
//////////////////////////////////////////////////////////////////////


create neutral /cells/Soma_GEN
//   Adding cells of type DCN_soma_GEN in region SampleRegion

//   Placing these cells in a region described by: Rectangular Box from point: (0.0, 0.0, 0.0) to (100.0, 50.0, 100.0)

//   Packing has been generated by: Random: num: 1, edge: 1, overlap: 1, other overlap: 1


str compName

readcell /home/padraig/neuroConstruct/models/SteuberEtAl-DeepCerebNucleusCell/simulations/Sim_31/DCN_soma_GEN.p /cells/Soma_GEN/Soma_GEN_0
addfield /cells/Soma_GEN/Soma_GEN_0 celltype
setfield /cells/Soma_GEN/Soma_GEN_0 celltype DCN_soma_GEN


//////////////////////////////////////////////////////////////////////
//   Cell group 1: Soma_CML has cells of type: DCN_soma_CML
//////////////////////////////////////////////////////////////////////


create neutral /cells/Soma_CML
//   Adding cells of type DCN_soma_CML in region SampleRegion

//   Placing these cells in a region described by: Rectangular Box from point: (0.0, 0.0, 0.0) to (100.0, 50.0, 100.0)

//   Packing has been generated by: Random: num: 1, edge: 1, overlap: 1, other overlap: 1


str compName

readcell /home/padraig/neuroConstruct/models/SteuberEtAl-DeepCerebNucleusCell/simulations/Sim_31/DCN_soma_CML.p /cells/Soma_CML/Soma_CML_0
addfield /cells/Soma_CML/Soma_CML_0 celltype
setfield /cells/Soma_CML/Soma_CML_0 celltype DCN_soma_CML



//////////////////////////////////////////////////////////////////////
//   Adding 4 stimulation(s)
//////////////////////////////////////////////////////////////////////

create neutral /stim
create neutral /stim/pulse
create neutral /stim/rndspike
create pulsegen /stim/pulse/stim_Input_3_Soma_GEN_0

//   Adding a current pulse of amplitude: -1.0E-11 A, SingleElectricalInput: [Input: IClamp, cellGroup: Soma_GEN, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 -1.0E-11 width1 0.1 delay1 0.59999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_3_Soma_GEN_0 /cells/Soma_GEN/Soma_GEN_0/soma INJECT output

create pulsegen /stim/pulse/stim_Input_2_Soma_GEN_0

//   Adding a current pulse of amplitude: 2.0E-11 A, SingleElectricalInput: [Input: IClamp, cellGroup: Soma_GEN, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 2.0E-11 width1 0.1 delay1 0.09999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_2_Soma_GEN_0 /cells/Soma_GEN/Soma_GEN_0/soma INJECT output

create pulsegen /stim/pulse/stim_Input_1_Soma_CML_0

//   Adding a current pulse of amplitude: -1.0E-11 A, SingleElectricalInput: [Input: IClamp, cellGroup: Soma_CML, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 -1.0E-11 width1 0.1 delay1 0.59999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_1_Soma_CML_0 /cells/Soma_CML/Soma_CML_0/soma INJECT output

create pulsegen /stim/pulse/stim_Input_0_Soma_CML_0

//   Adding a current pulse of amplitude: 2.0E-11 A, SingleElectricalInput: [Input: IClamp, cellGroup: Soma_CML, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 2.0E-11 width1 0.1 delay1 0.09999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_0_Soma_CML_0 /cells/Soma_CML/Soma_CML_0/soma INJECT output


//////////////////////////////////////////////////////////////////////
//   Settings for running the demo
//////////////////////////////////////////////////////////////////////


float dt = 1.0E-5
float duration = 0.8
int steps =  {{duration}/{dt}}

setclock 0 {dt} // Units[GENESIS_SI_time, symbol: s]
setclock 1 {dt} // Units[GENESIS_SI_time, symbol: s]
setclock 2 {dt} // Units[GENESIS_SI_time, symbol: s]

echo Checking and resetting...

//////////////////////////////////////////////////////////////////////
//   Recording 6 variable(s)
//////////////////////////////////////////////////////////////////////


//   Single simulation run...

str simsDir
simsDir = "/home/padraig/neuroConstruct/models/SteuberEtAl-DeepCerebNucleusCell/simulations/"

str simReference
simReference = "Sim_31"

str targetDir
targetDir =  {strcat {simsDir} {simReference}}
targetDir =  {strcat {targetDir} {"/"}}

echo
echo
echo     Preparing recording of cell parameters
echo
echo

create neutral /fileout
str cellName
str compName
create neutral /fileout/cells
echo Created: /fileout/cells


//   Saving VOLTAGE on only one seg, id: 0, in the only cell in Soma_CML

if (!{exists /fileout/cells/Soma_CML})
    create neutral /fileout/cells/Soma_CML
end

foreach cellName ({el /cells/Soma_CML/#})
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

    ce {cellName}

//   Recording at segInOrigCell: soma (Id: 0), segInMappedCell: soma, section: soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 10.7985, (0.0, 0.0, 0.0) -> (0.0, 0.0, 0.0) (FINITE VOLUME)

    compName = {strcat {cellName} /soma}
    str fileNameStr
    fileNameStr = {strcat {getpath {cellName} -tail} {".dat"} }
    echo "Going to record element at " {compName}
    create table /fileout{compName}VOLTAGE
    setfield /fileout{compName}VOLTAGE step_mode 3
    call /fileout{compName}VOLTAGE TABCREATE {{steps}+1} -1000 1000
    
    addmsg  {cellName}/soma /fileout{compName}VOLTAGE INPUT Vm
end

//   Saving NaF_GEN:Y on only one seg, id: 0, in only cell: 0 in Soma_GEN

if (!{exists /fileout/cells/Soma_GEN})
    create neutral /fileout/cells/Soma_GEN
end

//   Recording cell: /cells/Soma_GEN/Soma_GEN_0

cellName = "/cells/Soma_GEN/Soma_GEN_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: soma (Id: 0), segInMappedCell: soma, section: soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 10.7985, (0.0, 0.0, 0.0) -> (0.0, 0.0, 0.0) (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".NaF_GEN_Y.dat"} }
echo "Going to record element at " {compName}
create table /fileout{compName}NaF_GEN_Y
setfield /fileout{compName}NaF_GEN_Y step_mode 3
call /fileout{compName}NaF_GEN_Y TABCREATE {{steps}+1} -1000 1000
        addmsg  /cells/Soma_GEN/Soma_GEN_0/soma/NaF_GEN /fileout{compName}NaF_GEN_Y INPUT Y
//   Saving NaF_GEN:X on only one seg, id: 0, in only cell: 0 in Soma_GEN

if (!{exists /fileout/cells/Soma_GEN})
    create neutral /fileout/cells/Soma_GEN
end

//   Recording cell: /cells/Soma_GEN/Soma_GEN_0

cellName = "/cells/Soma_GEN/Soma_GEN_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: soma (Id: 0), segInMappedCell: soma, section: soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 10.7985, (0.0, 0.0, 0.0) -> (0.0, 0.0, 0.0) (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".NaF_GEN_X.dat"} }
echo "Going to record element at " {compName}
create table /fileout{compName}NaF_GEN_X
setfield /fileout{compName}NaF_GEN_X step_mode 3
call /fileout{compName}NaF_GEN_X TABCREATE {{steps}+1} -1000 1000
        addmsg  /cells/Soma_GEN/Soma_GEN_0/soma/NaF_GEN /fileout{compName}NaF_GEN_X INPUT X
//   Saving NaF:h on only one seg, id: 0, in only cell: 0 in Soma_CML

if (!{exists /fileout/cells/Soma_CML})
    create neutral /fileout/cells/Soma_CML
end

//   Recording cell: /cells/Soma_CML/Soma_CML_0

cellName = "/cells/Soma_CML/Soma_CML_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: soma (Id: 0), segInMappedCell: soma, section: soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 10.7985, (0.0, 0.0, 0.0) -> (0.0, 0.0, 0.0) (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".NaF_h.dat"} }
echo "Going to record element at " {compName}
create table /fileout{compName}NaF_h
setfield /fileout{compName}NaF_h step_mode 3
call /fileout{compName}NaF_h TABCREATE {{steps}+1} -1000 1000
        addmsg  /cells/Soma_CML/Soma_CML_0/soma/NaF /fileout{compName}NaF_h INPUT Y
//   Saving NaF:m on only one seg, id: 0, in only cell: 0 in Soma_CML

if (!{exists /fileout/cells/Soma_CML})
    create neutral /fileout/cells/Soma_CML
end

//   Recording cell: /cells/Soma_CML/Soma_CML_0

cellName = "/cells/Soma_CML/Soma_CML_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: soma (Id: 0), segInMappedCell: soma, section: soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 10.7985, (0.0, 0.0, 0.0) -> (0.0, 0.0, 0.0) (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".NaF_m.dat"} }
echo "Going to record element at " {compName}
create table /fileout{compName}NaF_m
setfield /fileout{compName}NaF_m step_mode 3
call /fileout{compName}NaF_m TABCREATE {{steps}+1} -1000 1000
        addmsg  /cells/Soma_CML/Soma_CML_0/soma/NaF /fileout{compName}NaF_m INPUT X
//   Saving VOLTAGE on only one seg, id: 0, in the only cell in Soma_GEN

if (!{exists /fileout/cells/Soma_GEN})
    create neutral /fileout/cells/Soma_GEN
end

foreach cellName ({el /cells/Soma_GEN/#})
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

    ce {cellName}

//   Recording at segInOrigCell: soma (Id: 0), segInMappedCell: soma, section: soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 10.7985, (0.0, 0.0, 0.0) -> (0.0, 0.0, 0.0) (FINITE VOLUME)

    compName = {strcat {cellName} /soma}
    str fileNameStr
    fileNameStr = {strcat {getpath {cellName} -tail} {".dat"} }
    echo "Going to record element at " {compName}
    create table /fileout{compName}VOLTAGE
    setfield /fileout{compName}VOLTAGE step_mode 3
    call /fileout{compName}VOLTAGE TABCREATE {{steps}+1} -1000 1000
    
    addmsg  {cellName}/soma /fileout{compName}VOLTAGE INPUT Vm
end

//////////////////////////////////////////////////////////////////////
//   This will run a full simulation when the file is executed
//////////////////////////////////////////////////////////////////////

reset
str startTimeFile
str stopTimeFile
startTimeFile = {strcat {targetDir} {"starttime"}}
stopTimeFile = {strcat {targetDir} {"stoptime"}}
sh {strcat {"date +%s.%N > "} {startTimeFile}}

echo Starting sim: Sim_31 on {genesisCore} with dur: {duration} dt: {dt} and steps: {steps} (Crank-Nicholson num integration method (11), using hsolve: true, chanmode: 0)
date +%F__%T__%N
step {steps}

echo Finished simulation reference: Sim_31
date +%F__%T__%N
echo Data stored in directory: {targetDir}

//   Saving file containing time details

float i, timeAtStep
create table /fileout/timefile
call /fileout/timefile TABCREATE {steps} 0 {duration}
for (i = 0; i <= {steps}; i = i + 1)
    timeAtStep = {dt} * i
setfield /fileout/timefile table->table[{i}] {timeAtStep}
end

tab2file {strcat {targetDir} {"time.dat"}} /fileout/timefile table -nentries {{steps}+1} -overwrite

// Saving VOLTAGE on only one seg, id: 0, in the only cell in Soma_CML
foreach cellName ({el /cells/Soma_CML/#})
    ce {cellName}

    compName = {strcat {cellName} /soma}
    str fileNameStr
    fileNameStr = {strcat {getpath {cellName} -tail} {".dat"} }
tab2file {strcat {targetDir} {fileNameStr}} /fileout{compName}VOLTAGE table -overwrite
end

str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".NaF_GEN_Y.dat"} }
compName = {strcat {cellName} /soma}
tab2file {strcat {targetDir} {fileNameStr}} /fileout{compName}NaF_GEN_Y table -overwrite
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".NaF_GEN_X.dat"} }
compName = {strcat {cellName} /soma}
tab2file {strcat {targetDir} {fileNameStr}} /fileout{compName}NaF_GEN_X table -overwrite
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".NaF_h.dat"} }
compName = {strcat {cellName} /soma}
tab2file {strcat {targetDir} {fileNameStr}} /fileout{compName}NaF_h table -overwrite
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".NaF_m.dat"} }
compName = {strcat {cellName} /soma}
tab2file {strcat {targetDir} {fileNameStr}} /fileout{compName}NaF_m table -overwrite
// Saving VOLTAGE on only one seg, id: 0, in the only cell in Soma_GEN
foreach cellName ({el /cells/Soma_GEN/#})
    ce {cellName}

    compName = {strcat {cellName} /soma}
    str fileNameStr
    fileNameStr = {strcat {getpath {cellName} -tail} {".dat"} }
tab2file {strcat {targetDir} {fileNameStr}} /fileout{compName}VOLTAGE table -overwrite
end


sh {strcat {"date +%s.%N > "} {stopTimeFile}}

openfile {startTimeFile} r
openfile {stopTimeFile} r
float starttime = {readfile {startTimeFile}}  
float stoptime =  {readfile {stopTimeFile}}  
float runTime = {stoptime - starttime}  
echo Simulation took : {runTime} seconds  
closefile {startTimeFile} 
closefile {stopTimeFile} 


str hostnameFile
hostnameFile = {strcat {targetDir} {"hostname"}}
sh {strcat {"hostname > "} {hostnameFile}}
openfile {hostnameFile} r
str hostnamestr = {readfile {hostnameFile}}
closefile {hostnameFile}

str simPropsFile
simPropsFile = {strcat {targetDir} {"simulator.props"}}
openfile {simPropsFile} w
writefile {simPropsFile} "RealSimulationTime="{runTime}
writefile {simPropsFile} "Host="{hostnamestr}
closefile {simPropsFile} 

//////////////////////////////////////////////////////////////////////
//   GENESIS script to run at location: Type 15, After simulation run
//////////////////////////////////////////////////////////////////////

echo Finished simulation!

ce soma

//////////////////////////////////////////////////////////////////////
//   End of GENESIS script to run at location: Type 15, After simulation run
//////////////////////////////////////////////////////////////////////


/*

*/
