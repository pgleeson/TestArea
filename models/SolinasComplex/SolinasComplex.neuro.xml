<?xml version="1.0" encoding="UTF-8"?> 
<java version="1.6.0_07" class="java.beans.XMLDecoder"> 

<!-- This is a neuroConstruct project file. It's best to open this
file with neuroConstruct, as opposed to editing it directly. 

Note that this file is neuroConstruct specific and isn't any 
part of NeuroML or any standardised XML specification. -->

 <object class="ucl.physiol.neuroconstruct.project.BasicProjectInfo"> 
  <void property="projectDescription"> 
   <string>Solinas et al. Frontiers in Neuroscience. Neuron model implemented in NC.

Note:
-Extra hoc code to adjust ENa and EK</string> 
  </void> 
  <void property="projectFileVersion"> 
   <string>neuroConstruct v1.2.0</string> 
  </void> 
  <void property="projectName"> 
   <string>SolinasComplex</string> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.project.RegionsInfo"> 
  <void property="internalData"> 
   <void method="get"> 
    <string>Name</string> 
    <void method="add"> 
     <string>Regions_1</string> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Colour</string> 
    <void method="add"> 
     <object class="java.awt.Color"> 
      <int>255</int> 
      <int>255</int> 
      <int>255</int> 
      <int>255</int> 
     </object> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Description</string> 
    <void method="add"> 
     <object class="ucl.physiol.neuroconstruct.project.RectangularBox"> 
      <void property="parameterList"> 
       <void index="3"> 
        <void property="value"> 
         <float>300.0</float> 
        </void> 
       </void> 
       <void index="4"> 
        <void property="value"> 
         <float>100.0</float> 
        </void> 
       </void> 
       <void index="5"> 
        <void property="value"> 
         <float>72.0</float> 
        </void> 
       </void> 
      </void> 
     </object> 
    </void> 
   </void> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.project.CellGroupsInfo"> 
  <void property="internalData"> 
   <void method="get"> 
    <string>Cell Packing Adapter</string> 
    <void method="add"> 
     <object class="ucl.physiol.neuroconstruct.project.packing.RandomCellPackingAdapter"> 
      <void property="parameterList"> 
       <void index="0"> 
        <void property="value"> 
         <float>0.0</float> 
        </void> 
       </void> 
       <void index="2"> 
        <void property="value"> 
         <float>10.0</float> 
        </void> 
       </void> 
       <void index="3"> 
        <void property="value"> 
         <float>0.0</float> 
        </void> 
       </void> 
      </void> 
     </object> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Cell Type</string> 
    <void method="add"> 
     <string>Golgi_040408_C1</string> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Priority</string> 
    <void method="add"> 
     <int>10</int> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Colour</string> 
    <void method="add"> 
     <object class="java.awt.Color"> 
      <int>0</int> 
      <int>51</int> 
      <int>255</int> 
      <int>255</int> 
     </object> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Region Name</string> 
    <void method="add"> 
     <string>Regions_1</string> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Cell Group Name</string> 
    <void method="add"> 
     <string>CellGroup_1</string> 
    </void> 
   </void> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.project.SimPlotInfo"> 
  <void property="allSimPlots"> 
   <void method="add"> 
    <object class="ucl.physiol.neuroconstruct.project.SimPlot"> 
     <void property="cellGroup"> 
      <string>CellGroup_1</string> 
     </void> 
     <void property="cellNumber"> 
      <string>*</string> 
     </void> 
     <void property="graphWindow"> 
      <string>GraphWin_0</string> 
     </void> 
     <void property="maxValue"> 
      <float>50.0</float> 
     </void> 
     <void property="minValue"> 
      <float>-90.0</float> 
     </void> 
     <void property="plotAndOrSave"> 
      <string>Plot and save</string> 
     </void> 
     <void property="plotReference"> 
      <string>Var_0</string> 
     </void> 
     <void property="segmentId"> 
      <string>0</string> 
     </void> 
    </object> 
   </void> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.project.ProjectProperties"> 
  <void property="preferredSaveFormat"> 
   <string>Java Serialized Object Format</string> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.utils.Display3DProperties"> 
  <void property="backgroundColour3D"> 
   <object class="java.awt.Color"> 
    <int>255</int> 
    <int>255</int> 
    <int>255</int> 
    <int>255</int> 
   </object> 
  </void> 
  <void property="cellColour3D"> 
   <object class="java.awt.Color"> 
    <int>255</int> 
    <int>255</int> 
    <int>255</int> 
    <int>255</int> 
   </object> 
  </void> 
  <void property="displayOption"> 
   <string>Soma solid, neurite lines</string> 
  </void> 
  <void property="showInputs"> 
   <boolean>false</boolean> 
  </void> 
  <void property="showSynapseConns"> 
   <boolean>false</boolean> 
  </void> 
  <void property="transparency"> 
   <float>0.6</float> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.neuron.NeuronSettings"> 
  <void property="nativeBlocks"> 
   <void method="put"> 
    <int>10</int> 
    <string>/*


time_window = 20
bin_number = tstop / time_window
AP_bins = new Vector(bin_number)
AP_bins_abscissa = new Vector(bin_number)

for cnt1 = 0, bin_number-1 { 
    
    N=0
    window_begin = cnt1 * time_window
    window_end = (cnt1+1) * time_window
    
    for cnt2 = 0, number_of_cells-1 {
        
        for cnt3 = 0, AP_times[cnt2].size-1 {
            if ((AP_times[cnt2].x[cnt3] &gt;= window_begin)&amp;&amp;(AP_times[cnt2].x[cnt3] &lt;= window_end)) {
                N = N+1
            }
        }
    }
    AP_bins.x[cnt1] = N
    AP_bins_abscissa.x[cnt1] = cnt1 * time_window + 0.5 * time_window
}


index_vector = new Vector()

for cnt = 0, AP_bins.size-1 {
    if (AP_bins.x[cnt]) {
        index_vector.append(cnt)
    }
}
AP_bins_no_nills = AP_bins.ind(index_vector)
AP_bins_abscissa_no_nills = AP_bins_abscissa.ind(index_vector)

N_graph = new Graph()
AP_bins_no_nills.line(N_graph, AP_bins_abscissa_no_nills)
N_graph.size(0,tstop,0,number_of_cells)


for cnt1 = 0, number_of_cells-1 {
    instant_freq[cnt1] = new Vector()
    instant_freq_abscissa[cnt1] = new Vector()
    for cnt2 = 1, AP_times[cnt1].size-1 {
        instant_freq[cnt1].append(1 / (AP_times[cnt1].x[cnt2] - AP_times[cnt1].x[cnt2-1]) * 1000)
        instant_freq_abscissa[cnt1].append(AP_times[cnt1].x[cnt2])
    }
}

inst_freq_plot = new Graph()
for cnt = 0, number_of_cells-1 {
    instant_freq[cnt].line(inst_freq_plot,instant_freq_abscissa[cnt],cnt+1,4)
}
inst_freq_plot.size(0,tstop,0,10)

tstim = 610


for cnt1 = 0, number_of_cells-1 {
    phase_shift_reference[cnt1] = new Vector()
    phase_shift_reference_avg[cnt1] = new Vector(1)
    for cnt2 = 0, instant_freq_abscissa[cnt1].size-1 {
        if (instant_freq_abscissa[cnt1].x[cnt2] &lt; tstim) {
            phase_shift_reference[cnt1].append(instant_freq[cnt1].x[cnt2])
        }
    }
    phase_shift_reference_avg[cnt1].x[0] = phase_shift_reference[cnt1].mean()
}

for cnt1 = 0, number_of_cells-1 {
    phase_shift[cnt1] = new Vector()
    phase_shift[cnt1] = instant_freq[cnt1].c.pow(-1).mul(phase_shift_reference_avg[cnt1].x[0])
}

phase_shift_plot = new Graph()
for cnt = 0, number_of_cells-1 {
    phase_shift[cnt].line(phase_shift_plot,instant_freq_abscissa[cnt],cnt+1,4)
}
phase_shift_plot.size(0,tstop,0,2)

window_width = 20

vector_size = v_time.size
windowing_x = new Vector(vector_size)
windowing_y = new Vector(vector_size)

for cnt1 = 0, vector_size-1 {
    
    coincident_spikes = 0
    windowing_x.x(cnt1) = v_time.x(cnt1)
    
    if (windowing_x.x(cnt1) &gt; (tstop - window_width)) {
        break
    }
    
    slide_window_begin = v_time.x(cnt1)
    slide_window_end = v_time.x(cnt1) + window_width
    
    for cnt2 = 0, number_of_cells - 1 {
        for cnt3 = 0, AP_times[cnt2].size -1 {
            if ((AP_times[cnt2].x(cnt3) &gt;= slide_window_begin) &amp;&amp; (AP_times[cnt2].x(cnt3) &lt; slide_window_end)){
                coincident_spikes = coincident_spikes + 1
            }
            
        }
    }
    windowing_y.x(cnt1) = coincident_spikes
    
}

windowing_graph = new Graph()
windowing_y.line(windowing_graph, windowing_x)
windowing_graph.size(0,tstop,0, number_of_cells+2)
 

print &quot;the average frequency is: &quot;, phase_shift_reference_avg[0].x(0)

// calculate the CV

tstim = 500

for cnt1 = 0, number_of_cells-1 {
    isi[cnt1] = new Vector ()
    mean_isi[cnt1] = new Vector()
    
    for cnt2 = 0, instant_freq_abscissa[cnt1].size-1 {
        if ((instant_freq_abscissa[cnt1].x[cnt2] &gt; tstim)&amp;&amp;(instant_freq_abscissa[cnt1].x[cnt2] &lt; (tstim + 500))) {
            isi[cnt1].append(1 / instant_freq[cnt1].x[cnt2] * 1000)
        }
    }
    cv = isi[cnt1].stdev() / isi[cnt1].mean()
    print cv
}

*/



</string> 
   </void> 
   <void method="put"> 
    <int>3</int> 
    <string>
</string> 
   </void> 
   <void method="put"> 
    <int>2</int> 
    <string></string> 
   </void> 
   <void method="put"> 
    <int>-1</int> 
    <string>/*

strdef cmd

number_of_cells = 10
objref APcounter[number_of_cells]
objref AP_times[number_of_cells]

objref AP_bins, AP_bins_abscissa
objref index_vector

objref AP_bins_no_nills, AP_bins_abscissa_no_nills

objref N_graph

objref instant_freq[number_of_cells]
objref instant_freq_abscissa[number_of_cells]

objref inst_freq_plot

objref phase_shift_reference[number_of_cells]
objref phase_shift_reference_avg[number_of_cells]
objref phase_shift[number_of_cells]
objref phase_shift_abscissa[number_of_cells]

objref phase_shift_plot

objref random_percentage_generator

objref windowing_x, windowing_y

objref windowing_graph

objref isi[number_of_cells]
objref mean_isi[number_of_cells]

*/

</string> 
   </void> 
   <void method="put"> 
    <int>1</int> 
    <string>print &quot;Changing values of ena, ek&quot;

forall if (ismembrane(&quot;na_ion&quot;)) {
	print &quot;Changing ena in: &quot;, secname()
	ena = 87.39
}

forall if (ismembrane(&quot;k_ion&quot;)) {
	print &quot;Changing ek in: &quot;, secname()
	ek = -84.69
}


forall if (ismembrane (&quot;na_ion&quot;)) {
     gmax_NaP = 19e-5
     }</string> 
   </void> 
   <void method="put"> 
    <int>0</int> 
    <string>/*

for cnt = 0, number_of_cells-1 {
    allCells.o(cnt).Soma {
        APcounter[cnt] = new APCount(0.5)
        APcounter[cnt].thresh = 0
        
        AP_times[cnt] = new Vector()
        APcounter[cnt].record(AP_times[cnt])
    }
}

*/







</string> 
   </void> 
  </void> 
  <void property="varTimeStep"> 
   <boolean>true</boolean> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.genesis.GenesisSettings"/> 
 <object class="ucl.physiol.neuroconstruct.simulation.SimulationParameters"> 
  <void property="dt"> 
   <float>0.025</float> 
  </void> 
  <void property="duration"> 
   <float>1000.0</float> 
  </void> 
  <void property="reference"> 
   <string>Sim_783</string> 
  </void> 
  <void property="saveCopyGenSimFiles"> 
   <boolean>true</boolean> 
  </void> 
  <void property="temperature"> 
   <float>23.0</float> 
  </void> 
  <void property="whatToRecord"> 
   <int>2</int> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.project.ElecInputInfo"> 
  <void property="allStims"> 
   <void method="add"> 
    <object class="ucl.physiol.neuroconstruct.simulation.IClampSettings"> 
     <void property="amp"> 
      <void property="fixedNum"> 
       <float>1.5</float> 
      </void> 
     </void> 
     <void property="cellGroup"> 
      <string>CellGroup_1</string> 
     </void> 
     <void property="del"> 
      <void property="distributionType"> 
       <int>1</int> 
      </void> 
      <void property="fixedNum"> 
       <float>0.0</float> 
      </void> 
      <void property="max"> 
       <float>530.0</float> 
      </void> 
      <void property="min"> 
       <float>480.0</float> 
      </void> 
     </void> 
     <void property="dur"> 
      <void property="fixedNum"> 
       <float>1.0</float> 
      </void> 
      <void property="numberType"> 
       <int>11</int> 
      </void> 
     </void> 
     <void property="reference"> 
      <string>Input_0</string> 
     </void> 
    </object> 
   </void> 
   <void method="add"> 
    <object class="ucl.physiol.neuroconstruct.simulation.IClampSettings"> 
     <void property="amp"> 
      <void property="fixedNum"> 
       <float>0.0</float> 
      </void> 
     </void> 
     <void property="cellGroup"> 
      <string>CellGroup_1</string> 
     </void> 
     <void property="del"> 
      <void property="fixedNum"> 
       <float>0.0</float> 
      </void> 
     </void> 
     <void property="dur"> 
      <void property="fixedNum"> 
       <float>2000.0</float> 
      </void> 
      <void property="numberType"> 
       <int>11</int> 
      </void> 
     </void> 
     <void property="reference"> 
      <string>Input_10</string> 
     </void> 
    </object> 
   </void> 
   <void method="add"> 
    <object class="ucl.physiol.neuroconstruct.simulation.RandomSpikeTrainSettings"> 
     <void property="cellGroup"> 
      <string>CellGroup_1</string> 
     </void> 
     <void property="noise"> 
      <float>10.0</float> 
     </void> 
     <void property="rate"> 
      <object class="ucl.physiol.neuroconstruct.utils.NumberGenerator"> 
       <void property="fixedNum"> 
        <float>5.0E-4</float> 
       </void> 
       <void property="numberType"> 
        <int>11</int> 
       </void> 
      </object> 
     </void> 
     <void property="reference"> 
      <string>Input_20</string> 
     </void> 
     <void property="segChooser"> 
      <object class="ucl.physiol.neuroconstruct.project.segmentchoice.GroupDistributedSegments"> 
       <void property="group"> 
        <string>apical</string> 
       </void> 
       <void property="numberOfSegments"> 
        <int>50</int> 
       </void> 
      </object> 
     </void> 
     <void property="synapseType"> 
      <string>ApicalSyn</string> 
     </void> 
    </object> 
   </void> 
   <void method="add"> 
    <object class="ucl.physiol.neuroconstruct.simulation.RandomSpikeTrainSettings"> 
     <void property="cellGroup"> 
      <string>CellGroup_1</string> 
     </void> 
     <void property="noise"> 
      <float>10.0</float> 
     </void> 
     <void property="rate"> 
      <object class="ucl.physiol.neuroconstruct.utils.NumberGenerator"> 
       <void property="fixedNum"> 
        <float>0.0010</float> 
       </void> 
       <void property="numberType"> 
        <int>11</int> 
       </void> 
      </object> 
     </void> 
     <void property="reference"> 
      <string>Input_21</string> 
     </void> 
     <void property="segChooser"> 
      <object class="ucl.physiol.neuroconstruct.project.segmentchoice.GroupDistributedSegments"> 
       <void property="group"> 
        <string>basolateral</string> 
       </void> 
       <void property="numberOfSegments"> 
        <int>10</int> 
       </void> 
      </object> 
     </void> 
     <void property="synapseType"> 
      <string>BasolateralSyn</string> 
     </void> 
    </object> 
   </void> 
   <void method="add"> 
    <object class="ucl.physiol.neuroconstruct.simulation.RandomSpikeTrainExtSettings"> 
     <void property="cellChooser"> 
      <object class="ucl.physiol.neuroconstruct.project.cellchoice.FixedNumberCells"> 
       <void property="parameterList"> 
        <void index="0"> 
         <void property="value"> 
          <float>1.0</float> 
         </void> 
        </void> 
       </void> 
      </object> 
     </void> 
     <void property="cellGroup"> 
      <string>CellGroup_1</string> 
     </void> 
     <void property="delay"> 
      <float>530.0</float> 
     </void> 
     <void property="duration"> 
      <float>10.0</float> 
     </void> 
     <void property="noise"> 
      <float>10.0</float> 
     </void> 
     <void property="rate"> 
      <object class="ucl.physiol.neuroconstruct.utils.NumberGenerator"> 
       <void property="fixedNum"> 
        <float>0.5</float> 
       </void> 
       <void property="numberType"> 
        <int>11</int> 
       </void> 
      </object> 
     </void> 
     <void property="reference"> 
      <string>Input_40</string> 
     </void> 
     <void property="segChooser"> 
      <object class="ucl.physiol.neuroconstruct.project.segmentchoice.GroupDistributedSegments"> 
       <void property="group"> 
        <string>dendrite_group</string> 
       </void> 
       <void property="numberOfSegments"> 
        <int>20</int> 
       </void> 
      </object> 
     </void> 
     <void property="synapseType"> 
      <string>DoubExpSyn</string> 
     </void> 
    </object> 
   </void> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.project.SimConfigInfo"> 
  <void property="allSimConfigs"> 
   <void method="add"> 
    <object class="ucl.physiol.neuroconstruct.project.SimConfig"> 
     <void property="cellGroups"> 
      <void method="add"> 
       <string>CellGroup_1</string> 
      </void> 
     </void> 
     <void property="description"> 
      <string>This is the default configuration of the Cell Groups, stimulations, plots, etc for this project</string> 
     </void> 
     <void property="inputs"> 
      <void method="add"> 
       <string>Input_21</string> 
      </void> 
      <void method="add"> 
       <string>Input_20</string> 
      </void> 
      <void method="add"> 
       <string>Input_40</string> 
      </void> 
     </void> 
     <void id="MpiConfiguration0" property="mpiConf"> 
      <void property="hostList"> 
       <void index="0"> 
        <void property="numProcessors"> 
         <int>4</int> 
        </void> 
       </void> 
      </void> 
      <void property="name"> 
       <string>Local machine (4p)</string> 
      </void> 
     </void> 
     <void property="mpiConf"> 
      <object idref="MpiConfiguration0"/> 
     </void> 
     <void property="name"> 
      <string>Default Simulation Configuration</string> 
     </void> 
     <void property="netConns"> 
      <void method="add"> 
       <string>NetConn_CellGroup_1_CellGroup_1</string> 
      </void> 
     </void> 
     <void property="plots"> 
      <void method="add"> 
       <string>Var_0</string> 
      </void> 
     </void> 
     <void property="simDuration"> 
      <float>1000.0</float> 
     </void> 
    </object> 
   </void> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.project.SimpleNetworkConnectionsInfo"> 
  <void property="internalData"> 
   <void method="get"> 
    <string>Name</string> 
    <void method="add"> 
     <string>NetConn_CellGroup_1_CellGroup_1</string> 
    </void> 
   </void> 
   <void method="get"> 
    <string>AP speed</string> 
    <void method="add"> 
     <float>3.4028235E38</float> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Synapse Type</string> 
    <void method="add"> 
     <object class="java.util.Vector"> 
      <void method="add"> 
       <object class="ucl.physiol.neuroconstruct.project.SynapticProperties"> 
        <void property="delayGenerator"> 
         <object class="ucl.physiol.neuroconstruct.utils.NumberGenerator"> 
          <void property="fixedNum"> 
           <float>5.0</float> 
          </void> 
          <void property="numberType"> 
           <int>11</int> 
          </void> 
         </object> 
        </void> 
        <void property="synapseType"> 
         <string>GapJuncPara</string> 
        </void> 
        <void property="threshold"> 
         <double>-20.0</double> 
        </void> 
        <void property="weightsGenerator"> 
         <object class="ucl.physiol.neuroconstruct.utils.WeightGenerator"> 
          <void property="distributionType"> 
           <int>3</int> 
          </void> 
          <void property="inhomoExpr"> 
           <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
            <void property="first"> 
             <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
              <void property="first"> 
               <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                <void property="first"> 
                 <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                  <void property="value"> 
                   <double>576.39</double> 
                  </void> 
                 </object> 
                </void> 
                <void property="operation"> 
                 <char>*</char> 
                </void> 
                <void property="second"> 
                 <object class="ucl.physiol.neuroconstruct.utils.equation.functions.ExpFunctionUnit"> 
                  <void property="internalEqn"> 
                   <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                    <void property="first"> 
                     <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                      <void property="first"> 
                       <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                        <void property="first"> 
                         <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                          <void property="value"> 
                           <double>32.6222</double> 
                          </void> 
                         </object> 
                        </void> 
                        <void property="operation"> 
                         <char>*</char> 
                        </void> 
                        <void property="second"> 
                         <object class="ucl.physiol.neuroconstruct.utils.equation.functions.ExpFunctionUnit"> 
                          <void property="internalEqn"> 
                           <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                            <void property="first"> 
                             <object class="ucl.physiol.neuroconstruct.utils.equation.Variable"> 
                              <void property="name"> 
                               <string>r</string> 
                              </void> 
                             </object> 
                            </void> 
                            <void property="operation"> 
                             <char>/</char> 
                            </void> 
                            <void property="second"> 
                             <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                              <void property="value"> 
                               <double>-58.0103</double> 
                              </void> 
                             </object> 
                            </void> 
                           </object> 
                          </void> 
                          <void property="name"> 
                           <string>exp</string> 
                          </void> 
                         </object> 
                        </void> 
                       </object> 
                      </void> 
                      <void property="operation"> 
                       <char>/</char> 
                      </void> 
                      <void property="second"> 
                       <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                        <void property="value"> 
                         <double>100.0</double> 
                        </void> 
                       </object> 
                      </void> 
                     </object> 
                    </void> 
                    <void property="operation"> 
                     <char>/</char> 
                    </void> 
                    <void property="second"> 
                     <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                      <void property="value"> 
                       <double>0.12399</double> 
                      </void> 
                     </object> 
                    </void> 
                   </object> 
                  </void> 
                  <void property="name"> 
                   <string>exp</string> 
                  </void> 
                 </object> 
                </void> 
               </object> 
              </void> 
              <void property="operation"> 
               <char>+</char> 
              </void> 
              <void property="second"> 
               <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                <void property="first"> 
                 <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                  <void property="value"> 
                   <double>0.5931</double> 
                  </void> 
                 </object> 
                </void> 
                <void property="operation"> 
                 <char>*</char> 
                </void> 
                <void property="second"> 
                 <object class="ucl.physiol.neuroconstruct.utils.equation.functions.ExpFunctionUnit"> 
                  <void property="internalEqn"> 
                   <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                    <void property="first"> 
                     <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                      <void property="first"> 
                       <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                        <void property="first"> 
                         <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                          <void property="value"> 
                           <double>32.6222</double> 
                          </void> 
                         </object> 
                        </void> 
                        <void property="operation"> 
                         <char>*</char> 
                        </void> 
                        <void property="second"> 
                         <object class="ucl.physiol.neuroconstruct.utils.equation.functions.ExpFunctionUnit"> 
                          <void property="internalEqn"> 
                           <object class="ucl.physiol.neuroconstruct.utils.equation.BinaryOperation"> 
                            <void property="first"> 
                             <object class="ucl.physiol.neuroconstruct.utils.equation.Variable"> 
                              <void property="name"> 
                               <string>r</string> 
                              </void> 
                             </object> 
                            </void> 
                            <void property="operation"> 
                             <char>/</char> 
                            </void> 
                            <void property="second"> 
                             <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                              <void property="value"> 
                               <double>-58.0103</double> 
                              </void> 
                             </object> 
                            </void> 
                           </object> 
                          </void> 
                          <void property="name"> 
                           <string>exp</string> 
                          </void> 
                         </object> 
                        </void> 
                       </object> 
                      </void> 
                      <void property="operation"> 
                       <char>/</char> 
                      </void> 
                      <void property="second"> 
                       <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                        <void property="value"> 
                         <double>100.0</double> 
                        </void> 
                       </object> 
                      </void> 
                     </object> 
                    </void> 
                    <void property="operation"> 
                     <char>/</char> 
                    </void> 
                    <void property="second"> 
                     <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
                      <void property="value"> 
                       <double>0.0279</double> 
                      </void> 
                     </object> 
                    </void> 
                   </object> 
                  </void> 
                  <void property="name"> 
                   <string>exp</string> 
                  </void> 
                 </object> 
                </void> 
               </object> 
              </void> 
             </object> 
            </void> 
            <void property="operation"> 
             <char>-</char> 
            </void> 
            <void property="second"> 
             <object class="ucl.physiol.neuroconstruct.utils.equation.Constant"> 
              <void property="value"> 
               <double>564.47762</double> 
              </void> 
             </object> 
            </void> 
           </object> 
          </void> 
          <void property="somaToSoma"> 
           <boolean>true</boolean> 
          </void> 
         </object> 
        </void> 
       </object> 
      </void> 
     </object> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Max/min</string> 
    <void method="add"> 
     <object class="ucl.physiol.neuroconstruct.project.MaxMinLength"> 
      <void property="maxLength"> 
       <float>140.0</float> 
      </void> 
     </object> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Search Pattern</string> 
    <void method="add"> 
     <object class="ucl.physiol.neuroconstruct.project.SearchPattern"> 
      <void property="type"> 
       <int>0</int> 
      </void> 
     </object> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Source</string> 
    <void method="add"> 
     <string>CellGroup_1</string> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Connectivity Conditions</string> 
    <void method="add"> 
     <object class="ucl.physiol.neuroconstruct.project.ConnectivityConditions"> 
      <void property="allowAutapses"> 
       <boolean>false</boolean> 
      </void> 
      <void property="maxNumInitPerFinishCell"> 
       <int>9</int> 
      </void> 
      <void property="noRecurrent"> 
       <boolean>true</boolean> 
      </void> 
      <void property="numConnsInitiatingCellGroup"> 
       <void property="fixedNum"> 
        <float>9.0</float> 
       </void> 
      </void> 
      <void property="onlyConnectToUniqueCells"> 
       <boolean>true</boolean> 
      </void> 
      <void property="prePostAllowedLoc"> 
       <void property="axonsAllowedPre"> 
        <boolean>false</boolean> 
       </void> 
       <void property="dendritesAllowedPre"> 
        <boolean>true</boolean> 
       </void> 
      </void> 
     </object> 
    </void> 
   </void> 
   <void method="get"> 
    <string>Target</string> 
    <void method="add"> 
     <string>CellGroup_1</string> 
    </void> 
   </void> 
  </void> 
 </object> 
 <object class="ucl.physiol.neuroconstruct.project.ArbourConnectionsInfo"/> 
</java> 
