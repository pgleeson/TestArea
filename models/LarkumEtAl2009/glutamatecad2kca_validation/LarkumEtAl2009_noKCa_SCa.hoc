//  ******************************************************
// 
//     File generated by: Daniel Ruedt 2012
// 
//  ******************************************************

load_file("nrngui.hoc")

strdef pwd
{system("pwd", pwd)}
print ""
print "Current working dir: ", pwd


//  Getting hostname

objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}


//  Simulation running in serial mode, setting default host id

{hostid = 0}


//  Initializes random-number generator

use_mcell_ran4(1)

mcell_ran4_init()


//////////////////////////////////////////////////////////////////////
// Setting SimReference and Directory
//////////////////////////////////////////////////////////////////////


strdef simReference
simReference = ""


strdef simsDir
//simsDir = "/home/ucbtdcr/simulations/segmentation_effects/"
simsDir = ""


//  Note: to change location of the generated simulation files, just change value of targetDir
//  e.g. targetDir="" or targetDir="aSubDir/"

strdef targetDir
sprint(targetDir, "", simsDir, simReference)



//////////////////////////////////////////////////////////////////////
//   Loading LarkumEtAl2009 morphology and biophysics
//////////////////////////////////////////////////////////////////////


//  Adding cell morphology file and settings

load_file("070603c2.cll")
load_file("apical_simulation_settings.hoc")



//////////////////////////////////////////////////////////////////////
//   Setting initial parameters
//////////////////////////////////////////////////////////////////////

strdef simConfig
{simConfig = "distal_rate_coding"}
{celsius = 34.0}
{forall Ra = 85}

//  Giving all cells an initial potential of: -60.0

proc initialiseValues0() {
	forall {v=-60.0}
}

objref fih0
fih0 = new FInitializeHandler(0, "initialiseValues0()")



//////////////////////////////////////////////////////////////////////
//   Adding Network Connections and Inputs
//////////////////////////////////////////////////////////////////////

objref dummy_source
objref stim[20]
objref connection_focal_stim[20]

thresh = -20
delay = 0
weight = 1


for i = 0,4 {
	tuft1[i].remove(hotzone)
}

for i = 0,4 {
	forsec tuft1[i] { gbar_kca=0}
}

access apic[63]

//dummy_source = new NetStim(0.590909)
dummy_source = new NetStim(0.590909)
dummy_source.number = 0
dummy_source.interval = 250.0
dummy_source.noise = 1.0
dummy_source.start = 0


for i = 0, 19 {

stim[i] = new glutamatecad2kca(0.590909)

connection_focal_stim[i] = new NetCon(dummy_source, stim[i], thresh, delay, weight)
}

Ra_glutamatecad2kca = 0.05

gbar_glutamatecad2kca = 40.0

access soma

//////////////////////////////////////////////////////////////////////
//   Settings for running the simulation
//////////////////////////////////////////////////////////////////////


tstop = 300.0
dt = 0.025
steps_per_ms = 40.0

forall Ra=85
forall ek=-87
celsius = 34
cah_glutamate = 8
tau_ampa_glutamate=1 
tau_ampa_AMPA=1
access soma
vshift_sca=-10
forsec apical vshift_hh3=-10


//////////////////////////////////////////////////////////////////////
//   Adding 1 plot(s)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//   Adding blocks of native NEURON code
//////////////////////////////////////////////////////////////////////


//  Hoc commands to run at location: Type 1, After Cell Process mechanism INITIAL blocks

//objref fih_1
//fih_1 = new FInitializeHandler(1.0, "callfi1()")
//proc callfi1() {
//
//}

//  End of hoc commands to run at location: Type 1, After Cell Process mechanism INITIAL blocks


//////////////////////////////////////////////////////////////////////
//   This will run a full simulation of 12001 steps when the hoc file is executed
//////////////////////////////////////////////////////////////////////


//  Recording 1 variable(s)

objref v_time

v_time = new Vector()
{ v_time.record(&t) }
{ v_time.resize(12001) }


//  Saving VOLTAGE on only one seg, id: 0, soma.v(0.5)


//  Creating vector for segment: soma

objref soma_v

soma_v = new Vector()
soma_v.record(&soma.v(0.5))
soma_v.resize(12001)


// Saving VOLTAGE in dendritic sections

objref apic_59_v1
objref apic_58_v05
objref apic_11_v05


apic_59_v1 = new Vector()
apic_59_v1.record(&apic[59].v(1.0))
apic_59_v1.resize(12001)

apic_58_v05 = new Vector()
apic_58_v05.record(&apic[58].v(0.5))
apic_58_v05.resize(12001)

apic_11_v05 = new Vector()
apic_11_v05.record(&apic[11].v(0.5))
apic_11_v05.resize(12001)


// Saving Ca concentration

objref Ca_concentration

Ca_concentration = new Vector()
Ca_concentration.record(&stim[0].ca)
Ca_concentration.resize(12001)

objref KCa_conductance

KCa_conductance = new Vector()
KCa_conductance.record(&stim[0].gk)
KCa_conductance.resize(12001)

//  Single simulation run...


//  Hoc commands to run at location: Type -0.5, After network created


access soma
objref output_times, netcon, nil
output_times = new Vector()
netcon = new NetCon(&v(.5), nil, -20, 0, 1)
netcon.record(output_times)

objref stim_times
stim_times = new Vector(3,0)

stim_times.x[0] = 50
stim_times.x[1] = 70
stim_times.x[2] = 90

objref fih_equalized

fih_equalized = new FInitializeHandler(1,"loadqueue()")
proc loadqueue() {
	for i = 0, 19 {
	connection_focal_stim[i].event(stim_times.x[0])
	connection_focal_stim[i].event(stim_times.x[1])
	connection_focal_stim[i].event(stim_times.x[2])
	}
}


//  End of hoc commands to run at location: Type -0.5, After network created

strdef date
// Note: not showing date/time of start/stop of simulation. This requires Cygwin to be installed// which includes the "date" unix command. Install under c:\cygwin

setuptime = stopsw()

print "Setup time for simulation: ",setuptime," seconds"

print "Starting simulation of duration ",tstop,"ms, dt: ",dt,"ms, reference: ",simReference,""

{currenttime = startsw()}


//////////////////////////////////////////////////////////////////////
//   Main run statement
//////////////////////////////////////////////////////////////////////

{run()}

{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"

print "Storing the data..."



strdef timeFilename
objref f_time
objref propsFile
objref f_soma_v
objref f_apic11_v
objref f_apic58_v
objref f_apic59_v
objref f_Ca_concentration
objref f_KCa_conductance


//  Saving VOLTAGE on only one seg, soma.v(0.5)


//  Saving vectors for soma.v(0.5) and apical sections 11, 58, 59

f_soma_v = new File()
strdef filename
sprint(filename, "%ssoma_voltage_trace_noKCa_SCa.dat", targetDir)
f_soma_v.wopen(filename)
soma_v.printf(f_soma_v)
f_soma_v.close()

f_apic11_v = new File()
strdef filename
sprint(filename, "%sapic11_v05_noKCa_SCa.dat", targetDir)
f_apic11_v.wopen(filename)
apic_11_v05.printf(f_apic11_v)
f_apic11_v.close()

f_apic58_v = new File()
strdef filename
sprint(filename, "%sapic58_v05_noKCa_SCa.dat", targetDir)
f_apic58_v.wopen(filename)
apic_58_v05.printf(f_apic58_v)
f_apic58_v.close()

f_apic59_v = new File()
strdef filename
sprint(filename, "%sapic59_v1_noKCa_SCa.dat", targetDir)
f_apic59_v.wopen(filename)
apic_59_v1.printf(f_apic59_v)
f_apic59_v.close()


f_time = new File()

{ sprint(timeFilename, "%s%s", targetDir, "time.dat")}
{ f_time.wopen(timeFilename) }
{ v_time.printf(f_time) }
{ f_time.close() }


// Saving Ca concentration and KCa conductance to file

f_Ca_concentration = new File()
strdef filename
sprint(filename, "%sCa_concentration.dat", targetDir)
f_Ca_concentration.wopen(filename)
Ca_concentration.printf(f_Ca_concentration)
f_Ca_concentration.close()

f_KCa_conductance = new File()
strdef filename
sprint(filename, "%sKCa_conductance.dat", targetDir)
f_KCa_conductance.wopen(filename)
KCa_conductance.printf(f_KCa_conductance)
f_KCa_conductance.close()


{savetime = stopsw()}

propsFile = new File()
strdef propsFilename
{sprint(propsFilename, "%ssimulator.props", targetDir)}
{propsFile.wopen(propsFilename)}
{propsFile.printf("#This is a list of properties generated by NEURON during the simulation run\n")}
{propsFile.printf("Host=%s\n", host)}
{propsFile.printf("RealSimulationTime=%g\n", realruntime)}
{propsFile.printf("SimulationSaveTime=%g\n", savetime)}
{propsFile.printf("SimulationSetupTime=%g\n", setuptime)}
{propsFile.printf("NEURONversion=%s\n", nrnversion())}
{propsFile.close()}

print "Data stored in ",savetime, "secs in directory: ", targetDir




//  Hoc commands to run at location: Type 10, After simulation run



objref output
output = new File()
output.wopen("output_times.dat")
output_times.printf(output)
output.close()


//  End of hoc commands to run at location: Type 10, After simulation run

quit()