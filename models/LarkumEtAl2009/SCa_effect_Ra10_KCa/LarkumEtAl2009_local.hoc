//  ******************************************************
// 
//     File generated by: Daniel Ruedt 2012
// 
//  ******************************************************

load_file("nrngui.hoc")

strdef pwd
{system("pwd", pwd)}
print ""
print "Current working dir: ", pwd


//  Getting hostname

objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}


//  Simulation running in serial mode, setting default host id

{hostid = 0}


//  Initializes random-number generator

use_mcell_ran4(1)

mcell_ran4_init(3825679960)


//////////////////////////////////////////////////////////////////////
// Setting SimReference and Directory
//////////////////////////////////////////////////////////////////////


strdef simReference
simReference = ""


strdef simsDir
simsDir = ""


//  Note: to change location of the generated simulation files, just change value of targetDir
//  e.g. targetDir="" or targetDir="aSubDir/"

strdef targetDir
sprint(targetDir, "", simsDir, simReference)



//////////////////////////////////////////////////////////////////////
//   Loading LarkumEtAl2009 morphology and biophysics
//////////////////////////////////////////////////////////////////////


//  Adding cell morphology file and settings

load_file("070603c2.cll")
load_file("apical_simulation_settings.hoc")
//load_file("segmentation.hoc")



//////////////////////////////////////////////////////////////////////
//   Setting initial parameters
//////////////////////////////////////////////////////////////////////

strdef simConfig
{simConfig = "distal_rate_coding"}
{celsius = 34.0}
{forall Ra = 85}

//  Giving all cells an initial potential of: -60.0

proc initialiseValues0() {
	forall {v=-60.0}
}

objref fih0
fih0 = new FInitializeHandler(0, "initialiseValues0()")



//////////////////////////////////////////////////////////////////////
//   Adding Network Connections and Inputs
//////////////////////////////////////////////////////////////////////

strdef Input_file
sprint(Input_file, "%sInputs.hoc",targetDir)

load_file(Input_file)


access soma

//////////////////////////////////////////////////////////////////////
//   Settings for running the simulation
//////////////////////////////////////////////////////////////////////


tstop = 2000.0
dt = 0.025
steps_per_ms = 40.0

forall Ra=85
forall ek=-87
forall ena=50
celsius = 34
cah_glutamate = 8
tau_ampa_glutamate=1 
tau_ampa_AMPA=1
access soma
vshift_sca=-10
forsec apical vshift_hh3=-10


tau1_glutamatecad2kca=70
Ra_glutamatecad2kca=0.0050000
NMDAswitch_glutamatecad2kca=1




//////////////////////////////////////////////////////////////////////
//   Adding 1 plot(s)
//////////////////////////////////////////////////////////////////////


//   This code pops up a plot of soma.v(0.5)

//objref LV_pyr_group_v
//LV_pyr_group_v = new Graph(0)
//{LV_pyr_group_v.size(0, tstop,-70.0,50.0)}
//{LV_pyr_group_v.view(0, -90.0, tstop, 140.0, 80, 330, 330, 250)}
//{
//    LV_pyr_group_v.addexpr("soma.v(0.5)", "soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
//    graphList[0].append(LV_pyr_group_v)
//}

//////////////////////////////////////////////////////////////////////
//   Adding blocks of native NEURON code
//////////////////////////////////////////////////////////////////////


//  Hoc commands to run at location: Type 1, After Cell Process mechanism INITIAL blocks

//objref fih_1
//fih_1 = new FInitializeHandler(1.0, "callfi1()")
//proc callfi1() {
//
//}

//  End of hoc commands to run at location: Type 1, After Cell Process mechanism INITIAL blocks


//////////////////////////////////////////////////////////////////////
//   This will run a full simulation of 80001 steps when the hoc file is executed
//////////////////////////////////////////////////////////////////////


//  Recording 1 variable(s)

objref v_time

v_time = new Vector()
{ v_time.record(&t) }
{ v_time.resize(80001) }


//  Saving VOLTAGE on only one seg, id: 0, soma.v(0.5)


//  Creating vector for segment: soma

objref soma_v

soma_v = new Vector()
soma_v.record(&soma.v(0.5))
soma_v.resize(80001)


//  Single simulation run...


//  Hoc commands to run at location: Type -0.5, After network created


access soma
objref output_times, netcon, nil
output_times = new Vector()
netcon = new NetCon(&v(.5), nil, -20, 0, 1)
netcon.record(output_times)


// DR addition for recording spiketimes

objref tvec[n_rate_coded]

for(i=0; i<=n_rate_coded-1; i=i+1){
	tvec[i] = new Vector()
	connection_rate_coded[i].record(tvec[i])
}


//  End of hoc commands to run at location: Type -0.5, After network created

strdef date
// Note: not showing date/time of start/stop of simulation. This requires Cygwin to be installed// which includes the "date" unix command. Install under c:\cygwin

setuptime = stopsw()

print "Setup time for simulation: ",setuptime," seconds"

print "Starting simulation of duration ",tstop,"ms, dt: ",dt,"ms, reference: ",simReference,""

{currenttime = startsw()}


//////////////////////////////////////////////////////////////////////
//   Main run statement
//////////////////////////////////////////////////////////////////////

{run()}

{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"

print "Storing the data..."



strdef timeFilename
objref f_time
objref propsFile
objref f_soma_v


//  Saving VOLTAGE on only one seg, soma.v(0.5)


//  Saving vector for soma.v(0.5)

f_soma_v = new File()
strdef filename
sprint(filename, "%ssoma_voltage_trace.dat", targetDir)
f_soma_v.wopen(filename)
soma_v.printf(f_soma_v)
f_soma_v.close()


f_time = new File()

{ sprint(timeFilename, "%s%s", targetDir, "time.dat")}
{ f_time.wopen(timeFilename) }
{ v_time.printf(f_time) }
{ f_time.close() }

{savetime = stopsw()}

propsFile = new File()
strdef propsFilename
{sprint(propsFilename, "%ssimulator.props", targetDir)}
{propsFile.wopen(propsFilename)}
{propsFile.printf("#This is a list of properties generated by NEURON during the simulation run\n")}
{propsFile.printf("Host=%s\n", host)}
{propsFile.printf("RealSimulationTime=%g\n", realruntime)}
{propsFile.printf("SimulationSaveTime=%g\n", savetime)}
{propsFile.printf("SimulationSetupTime=%g\n", setuptime)}
{propsFile.printf("NEURONversion=%s\n", nrnversion())}
{propsFile.close()}

print "Data stored in ",savetime, "secs in directory: ", targetDir




//  Hoc commands to run at location: Type 10, After simulation run



// DR addition for saving input spiketimes

objref spiketimes[n_rate_coded]
strdef suffix, filename
suffix = ".dat"

for(i=0; i<=n_rate_coded-1; i=i+1){
	spiketimes[i] = new File()
	sprint(filename,"spiketimes%d%s",i,suffix)
	spiketimes[i].wopen(filename)
	tvec[i].printf(spiketimes[i])
	spiketimes[i].close()
}


objref output
output = new File()
output.wopen("output_times.dat")
output_times.printf(output)
output.close()


//  End of hoc commands to run at location: Type 10, After simulation run

quit()
