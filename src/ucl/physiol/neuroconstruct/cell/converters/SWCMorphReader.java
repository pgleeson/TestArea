/**
 * neuroConstruct
 *
 * Software for developing large scale 3D networks of biologically realistic neurons
 * Copyright (c) 2007 Padraig Gleeson
 * UCL Department of Physiology
 *
 * Development of this software was made possible with funding from the
 * Medical Research Council
 *
 */

package ucl.physiol.neuroconstruct.cell.converters;

import java.io.*;
import java.util.*;
import javax.vecmath.*;

import ucl.physiol.neuroconstruct.cell.*;
import ucl.physiol.neuroconstruct.cell.utils.*;
import ucl.physiol.neuroconstruct.utils.*;

/**
 *
 * A class for importing SWC morphology files (.swc files), and creating Cells
 * which can be used by the rest of the application
 *
 * @author Padraig Gleeson
 * @version 1.0.4
 *
 */

public class SWCMorphReader extends FormatImporter
{
    private static ClassLogger logger = new ClassLogger("SWCMorphReader");


    public SWCMorphReader()
    {
        super("SWCMorphReader",
                            "Importer of SWC (Cvapp format) files",
                            new String[]{".swc"});
    }


    public Cell loadFromMorphologyFile(File morphologyFile, String name) throws MorphologyException
    {
        logger.logComment("Parsing file: " + morphologyFile);
        Cell cell = new Cell();
        cell.setInstanceName(name);

        try
        {
            Reader in = new FileReader(morphologyFile);
            BufferedReader lineReader = new BufferedReader(in);

            //String previousSegment = null;

            StringBuffer description = new StringBuffer("Cell morphology generated by neuroConstruct from file: "
                                                        + morphologyFile.getName()
                                                        + "\n");

            String nextLine = null;
            int lineCount = 0;

            Hashtable namesVsSegments = new Hashtable();

            while ( (nextLine = lineReader.readLine()) != null)
            {
                lineCount++;
                nextLine = nextLine.trim();
                logger.logComment("Looking at line num " + lineCount + ": " + nextLine);

                if (nextLine.startsWith("#"))
                {
                    logger.logComment("Comment: " + nextLine);
                    if (nextLine.length()>2)
                    description.append(nextLine.substring("# ".length())+"\n");
                }
                else if (nextLine.length()==0)
                {
                    logger.logComment("Empty line...");
                }
                else
                {
                    String[] items = nextLine.split("\\s+");

                    if (items.length < 7)
                    {
                        String error = "Problem splitting up line (expecting at least 6 elements): " + nextLine;
                        throw new MorphologyException(morphologyFile.getAbsolutePath(), error);
                    }
                    else
                    {
                        String segmentName = cleanUpName(items[0]);
                        String parentName = cleanUpName(items[6]);
                        float xCoord = Float.parseFloat(items[2]);
                        float yCoord = Float.parseFloat(items[3]);
                        float zCoord = Float.parseFloat(items[4]);
                        float radius = Float.parseFloat(items[5]);

                        Segment newSeg = null;

                        if (parentName.equals("-1"))
                        {
                            newSeg = cell.addFirstSomaSegment(radius,
                                radius,
                                segmentName,
                                new Point3f(xCoord,
                                            yCoord,
                                            zCoord + 0.01f), // CVApp convention...
                                new Point3f(xCoord,
                                            yCoord,
                                            zCoord),
                                new Section("Soma"));

                            namesVsSegments.put(segmentName, newSeg);

                        }
                        else
                        {
                            Segment parentSegment = (Segment) namesVsSegments.get(parentName);

                            newSeg
                                = cell.addDendriticSegment(radius,
                                                           segmentName,
                                                           new Point3f(xCoord,
                                                                       yCoord,
                                                                       zCoord),
                                                           parentSegment,
                                                           1,
                                                           segmentName);

                            namesVsSegments.put(segmentName, newSeg);

                        }
                        int sectionType = -1;
                        try
                        {
                            sectionType = Integer.parseInt(items[1]);

                        }
                        catch (NumberFormatException e)
                        {
                            logger.logError("Error reading section type info from line", e);
                        }

                        // To mimic the cvapp/neurolucida colours..
                        
                        String somaColourGroup = "Colour_White";
                        String dendColourGroup = "Colour_Green";
                        String dendApicalColourGroup = "Colour_Magenta";
                        String axonColourGroup = "Colour_DarkGrey";
                        String c1ColourGroup = "Colour_Red";
                        String c2ColourGroup = "Colour_Blue";
                        String c3ColourGroup = "Colour_Yellow";

                        switch (sectionType)
                        {
                            case 0:
                                newSeg.getSection().addToGroup("undefined");
                                break;
                            case 1:
                                newSeg.getSection().addToGroup(Section.SOMA_GROUP);
                                newSeg.getSection().addToGroup(somaColourGroup);
                                break;
                            case 2:
                                newSeg.getSection().addToGroup(Section.AXONAL_GROUP);
                                newSeg.getSection().addToGroup(axonColourGroup);
                                
                                break;
                            case 3:
                                newSeg.getSection().addToGroup(Section.DENDRITIC_GROUP);
                                newSeg.getSection().addToGroup(dendColourGroup);
                                break;
                            case 4:
                                newSeg.getSection().addToGroup("apical_dendrite");
                                newSeg.getSection().addToGroup(dendApicalColourGroup);
                                break;
                            case 5:
                                newSeg.getSection().addToGroup("custom-1");
                                newSeg.getSection().addToGroup(c1ColourGroup);
                                break;
                            case 6:
                                newSeg.getSection().addToGroup("custom-2");
                                newSeg.getSection().addToGroup(c2ColourGroup);
                                break;
                            case 7:
                                newSeg.getSection().addToGroup("custom-n");
                                newSeg.getSection().addToGroup(c3ColourGroup);
                                break;

                        }
                    }
                }
            }
            if (lineCount == 0)
            {
                GuiUtils.showErrorMessage(logger, "Error. No lines found in file: " + morphologyFile, null, null);
            }

            cell.setCellDescription(description.toString());
        }
        catch (IOException e)
        {
            GuiUtils.showErrorMessage(logger, "Error: " + e.getMessage(), e, null);
            return null;
        }
        logger.logComment("Completed parsing of file: " + morphologyFile);

        return cell;
    }
    
    
    private static String cleanUpName(String secNameInFile)
    {
       try
       {
           Float.parseFloat(secNameInFile);
           return "Comp_"+secNameInFile;
       }
       catch(NumberFormatException nfe)
       {
           
       }
       return secNameInFile;
       
    }

    public static void main(String[] args)
    {
        File f = new File("\\temp\\dend47.swc");

        try
        {
            logger.logComment("loading cell...");
            GeneralUtils.timeCheck("Before loading swc");


            SWCMorphReader swcReader = new SWCMorphReader();

            Cell swcCell = swcReader.loadFromMorphologyFile(f, "SWCCellll");

            long newTime = System.currentTimeMillis();


            GeneralUtils.timeCheck("After loading swc");


            GeneralUtils.timeCheck("After showing cell info...");

            File cellFile = new File("c:\\temp\\temp.xml");

            MorphMLConverter.saveCellInJavaXMLFormat(swcCell, cellFile);

            GeneralUtils.timeCheck("After saving as XML...");

            Cell cellGenerated = MorphMLConverter.loadFromJavaXMLFile(cellFile);

            GeneralUtils.timeCheck("After loading from XML...");

            logger.logComment(CellTopologyHelper.printShortDetails(cellGenerated));

            GeneralUtils.timeCheck("After showing cell info...");




        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }

}
