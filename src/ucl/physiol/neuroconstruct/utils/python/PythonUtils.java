/**
 * neuroConstruct
 *
 * Software for developing large scale 3D networks of biologically realistic neurons
 * Copyright (c) 2007 Padraig Gleeson
 * UCL Department of Physiology
 *
 * Development of this software was made possible with funding from the
 * Medical Research Council
 *
 */

package ucl.physiol.neuroconstruct.utils.python;


import ucl.physiol.neuroconstruct.project.*;
import ucl.physiol.neuroconstruct.utils.*;

/**
 * Utilities for Python files
 *
 * @author Padraig Gleeson
 *  
 */


public class PythonUtils
{

    static ClassLogger logger = new ClassLogger("PythonUtils");

    public static final String INDENT = "    ";

    public static final String LOG_LEVEL_CRITICAL = "CRITICAL";
    public static final String LOG_LEVEL_ERROR = "ERROR";
    public static final String LOG_LEVEL_WARNING = "WARNING";
    public static final String LOG_LEVEL_INFO = "INFO";
    public static final String LOG_LEVEL_DEBUG = "DEBUG";
    public static final String LOG_LEVEL_NOTSET = "NOTSET";


    public static String getFileHeader()
    {
        StringBuffer response = new StringBuffer();
        response.append("#  ******************************************************\n");
        response.append("# \n");
        response.append("#     File generated by: neuroConstruct v"+GeneralProperties.getVersionNumber()+"\n");
        response.append("# \n");
        response.append("#  ******************************************************\n");

        response.append("\n");
        return response.toString();
    }

    public static String addMajorComment(StringBuffer responseBuffer, String comment)
    {
        String spacing = "    ";

        comment = GeneralUtils.replaceAllTokens(comment, "\n", "\n#"+spacing);
        
        StringBuffer response = new StringBuffer();
        response.append("#  ******************************************************\n");
        response.append("# \n");
        response.append("#"+spacing+comment+"\n");
        response.append("# \n");
        response.append("#  ******************************************************\n");

        response.append("\n");
        return response.toString();
    }


    public static void addComment(StringBuffer responseBuffer, String comment, boolean addComments)
    {
        String spacing = "  ";
        if (!addComments) return;

        comment = GeneralUtils.replaceAllTokens(comment, "\n", "\n#"+spacing);
        
        //if (!responseBuffer.toString().endsWith("\n")) responseBuffer.append("\n");

        responseBuffer.append("#"+spacing + comment + "\n\n");
        
    }

    public static void addPrintedComment(StringBuffer responseBuffer, 
                                           String comment, 
                                           String logLevel,
                                           boolean includeQuotes)
    {
        String q = "\"";
        if (!includeQuotes) q="";
        String pre = "log.log(logging."+logLevel+", "+q+"";
        String post = ""+q+")\n";

        comment = GeneralUtils.replaceAllTokens(comment, "\n", post+"\n"+pre);
        
        //if (!responseBuffer.toString().endsWith("\n")) responseBuffer.append("\n");

        responseBuffer.append(pre + comment + post+"\n");
        
    }
    
    
    /*
     * To allow typing of body content without need for indents, also to allow updating of structure of comment
     * etc.
     */
    public static String addMethodDef(String methodName, String args, String body, String comment)
    {
        StringBuffer response = new StringBuffer();
        if (comment!=null && comment.trim().length()>0)
        {
            response.append("#  ******************************************************\n");
            response.append("# \n");
            response.append("#  ");
            response.append(GeneralUtils.replaceAllTokens(comment, "\n", "\n#  ")+"\n");
           
            response.append("# \n");
            response.append("#  ******************************************************\n\n");
            if (args==null) args="";
            
            response.append("def "+methodName+"("+args+"):\n");

            response.append(INDENT + GeneralUtils.replaceAllTokens(body, "\n", "\n"+INDENT));
        }
        response.append("\n\n");
        return response.toString();
    }


    public static void main(String[] args)
    {
        
    }
}
